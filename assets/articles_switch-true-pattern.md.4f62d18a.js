import{_ as s,r as n,c as a,b as t,d as p,e,a as o,o as c}from"./app.df974142.js";const r='{"title":"妙用 switch(true)","description":"","frontmatter":{},"headers":[{"level":2,"title":"使用 switch(true) 匹配表达式","slug":"使用-switch-true-匹配表达式"},{"level":2,"title":"为什么这很有用","slug":"为什么这很有用"}],"relativePath":"articles/switch-true-pattern.md","lastUpdated":1649575260634}',l={},u=p("h1",{id:"妙用-switch-true",tabindex:"-1"},[e("妙用 switch(true) "),p("a",{class:"header-anchor",href:"#妙用-switch-true","aria-hidden":"true"},"#")],-1),k=o('<p>在需要进行多分支选择时，我们经常使用 <code>switch</code> 语句。大多数情况下，我们的匹配条件 (<code>case</code> 子句) 都是一个常量值。但其实，<code>case</code> 后面还可以是一个任意表达式，这在某些场景下会非常有用。</p><h2 id="使用-switch-true-匹配表达式" tabindex="-1">使用 <code>switch(true)</code> 匹配表达式 <a class="header-anchor" href="#使用-switch-true-匹配表达式" aria-hidden="true">#</a></h2><p><code>switch</code> 语句不仅匹配值还可以匹配表达式。<code>case</code> 子句中的表达式将在匹配前被计算，如果表达式的结果与 <code>switch</code> 后面的值相等，它将被匹配：</p><div class="language-js"><pre><code><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">===</span> <span class="token number">2</span><span class="token operator">:</span>\n    <span class="token comment">// case 表达式的结果为 true, 这里的会被执行</span>\n    <span class="token comment">// ...</span>\n    <span class="token keyword">break</span>\n  <span class="token keyword">default</span><span class="token operator">:</span>\n    <span class="token comment">// 这里不会被执行</span>\n    <span class="token keyword">break</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="为什么这很有用" tabindex="-1">为什么这很有用 <a class="header-anchor" href="#为什么这很有用" aria-hidden="true">#</a></h2><p>这种模式可以在很多场景下使用，用来取代复杂的 <code>if/else</code> 语句。一个常见场景是数据校验：</p><div class="language-js"><pre><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;Nicholas Yang&quot;</span><span class="token punctuation">,</span>\n  email<span class="token operator">:</span> <span class="token string">&quot;yss_2016@outlook.com&quot;</span><span class="token punctuation">,</span>\n  number<span class="token operator">:</span> <span class="token string">&quot;00447123456789&quot;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;User must be defined.&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;User&#39;s name must be defined&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> user<span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;User&#39;s name must be a string&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// ...更多校验语句</span>\n\n<span class="token keyword">return</span> user\n</code></pre></div><p>当校验条件很多时，这种写法看起来很不简洁和直观，但如果用 <code>switch(true)</code> 模式来重写，就会美观很多:</p><div class="language-js"><pre><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;Nicholas Yang&quot;</span><span class="token punctuation">,</span>\n  email<span class="token operator">:</span> <span class="token string">&quot;yss_2016@outlook.com&quot;</span><span class="token punctuation">,</span>\n  number<span class="token operator">:</span> <span class="token string">&quot;00447123456789&quot;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token operator">!</span>user<span class="token operator">:</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;User must be defined.&quot;</span><span class="token punctuation">)</span>\n  <span class="token keyword">case</span> <span class="token operator">!</span>user<span class="token punctuation">.</span>name<span class="token operator">:</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;User&#39;s name must be defined&quot;</span><span class="token punctuation">)</span>\n  <span class="token keyword">case</span> <span class="token keyword">typeof</span> user<span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token string">&quot;string&quot;</span><span class="token operator">:</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;User&#39;s name must be a string&quot;</span><span class="token punctuation">)</span>\n  <span class="token comment">// ...more validations</span>\n  <span class="token keyword">default</span><span class="token operator">:</span>\n    <span class="token keyword">return</span> user\n<span class="token punctuation">}</span>\n</code></pre></div><p>还可以将校验标准抽象成函数，以提高可读性：</p><div class="language-js"><pre><code><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token operator">!</span><span class="token function">isDefined</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token operator">:</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;User must be defined.&quot;</span><span class="token punctuation">)</span>\n  <span class="token keyword">case</span> <span class="token operator">!</span><span class="token function">isString</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token operator">:</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;User&#39;s name must be a string&quot;</span><span class="token punctuation">)</span>\n  <span class="token keyword">case</span> <span class="token operator">!</span><span class="token function">isValidEmail</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>email<span class="token punctuation">)</span><span class="token operator">:</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;User&#39;s email address must be a valid email address&quot;</span><span class="token punctuation">)</span>\n  <span class="token keyword">case</span> <span class="token operator">!</span><span class="token function">isValidPhoneNumber</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token operator">:</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;User&#39;s phone number must be a valid phone number&quot;</span><span class="token punctuation">)</span>\n  <span class="token comment">// ...more validations</span>\n  <span class="token keyword">default</span><span class="token operator">:</span>\n    <span class="token keyword">return</span> user\n<span class="token punctuation">}</span>\n</code></pre></div><p>在这种场景下，我个人更推荐使用 <code>switch(true)</code> 的写法。</p>',12);var i=s(l,[["render",function(s,p,e,o,r,l){const i=n("PubDate");return c(),a("div",null,[u,t(i,{date:"2021/12/25"}),k])}]]);export{r as __pageData,i as default};
