import{_ as n,r as s,c as a,b as o,d as p,e,a as t,o as c}from"./app.04efe956.js";const l='{"title":"深入理解 TypeScript 中的 unknown","description":"","frontmatter":{},"headers":[{"level":2,"title":"总结","slug":"总结"}],"relativePath":"articles/understand-unknown-in-typescript.md","lastUpdated":1645631892288}',k={},u=p("h1",{id:"深入理解-typescript-中的-unknown",tabindex:"-1"},[e("深入理解 TypeScript 中的 unknown "),p("a",{class:"header-anchor",href:"#深入理解-typescript-中的-unknown","aria-hidden":"true"},"#")],-1),i=t('<p>假设你在开发一个解析 YAML (YAML 是一种比 JSON 更灵活的数据表示格式) 的工具函数 <code>parseYAML</code>，那这个 parser 函数的返回类型应该是什么？</p><p><code>any</code> 好像是不错的选择：</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">parseYAML</span><span class="token punctuation">(</span>yaml<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>理想情况下，你希望用户将返回的结果立刻分配给另一个类型：</p><div class="language-ts"><pre><code><span class="token keyword">interface</span> <span class="token class-name">Book</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span>\n  author<span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> book<span class="token operator">:</span> Book <span class="token operator">=</span> <span class="token function">parseYAML</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  name: 聪格尔传\n  author: 狗蛋\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n</code></pre></div><p>这很完美，但是理想很美满，现实很骨感。用户很可能会直接接收返回值：</p><div class="language-ts"><pre><code><span class="token keyword">const</span> book <span class="token operator">=</span> <span class="token function">parseYAML</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  name: 聪格尔传\n  author: 狗蛋\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token function">alert</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token comment">// 无编译时错误, 但在运行时 alerts &quot;undefined&quot;</span>\n<span class="token function">book</span><span class="token punctuation">(</span><span class="token string">&#39;read&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 无编译时错误, 但在运行时 throws &quot;TypeError: book is not a function&quot;</span>\n</code></pre></div><p>可以看到 <code>any</code> 类型通过函数返回值传播给了 <code>book</code>，导致类型检查失效，从而导致运行时错误。这很不安全，也违背了 TypeScript 的初衷。</p><p>但如果将 <code>parseYAML</code> 的返回类型设为 <code>unknown</code>，情况就会好转：</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">parseYAML</span><span class="token punctuation">(</span>yaml<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> book <span class="token operator">=</span> <span class="token function">parseYAML</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  name: 聪格尔传\n  author: 狗蛋\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n\n<span class="token function">alert</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token comment">// ~~~~~~ Object is of type &#39;unknown&#39;</span>\n<span class="token function">book</span><span class="token punctuation">(</span><span class="token string">&quot;read&quot;</span><span class="token punctuation">)</span> <span class="token comment">// ~~~~~~~ Object is of type &#39;unknown&#39;</span>\n</code></pre></div><p>错误在编译时就会被暴露出来，这比在运行时出错要好的多。</p><p>那么 <code>unknown</code> 类型到底是什么？要理解它，先要从 <code>any</code> 说起。</p><p><code>any</code> 类型的两个主要特点：</p><ul><li>任何类型可以赋值给 <code>any</code> 类型</li><li><code>any</code> 类型可以赋值给任何类型</li></ul><p>从<strong>将类型看作值的集合</strong> (前面的文章中有讲过) 的角度来看，<code>any</code> 是不满足 TypeScript 的类型系统的，因为在数学意义上，找不到一个集合，它既是其它所有集合的超集 (superset) 又是其它所有集合的子集 (subset)。这也正是 <code>any</code> 强大而又危险的根源。因为 TypeScript 的类型检查是基于集合的，所以它对 <code>any</code> 不起作用。</p><p>而 <code>unknown</code> 可以看作是 <code>any</code> 的一个替代品，它具备 <code>any</code> 的第一个特点，即<strong>所有类型都可以赋值给 <code>unknown</code> 类型</strong>。但是不满足第二条，即 <strong><code>unknown</code> 类型只能赋值给 <code>unknown</code> 类型</strong> (当然，也可以赋给 <code>any</code>)。所以 <code>unknown</code> 满足 TypeScript 的类型系统，使用它是安全的。</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>顺带提一句，TypeScript 中还有一个内置类型 <code>never</code>， 它正好与 <code>unknown</code> 相反。它满足 <code>any</code> 的第二条而不满足第一条。即 <code>never</code> 类型可以赋给任何类型，但除了 <code>never</code>, 任何类型都不能赋给 <code>never</code> 类型。在数学意义上，<code>unknown</code> 代表全集 (universal set)，<code>never</code> 代表空集 (empty set)。</p></div><p><code>unknown</code> 正如它的字面意思：“未知的”，代表未知的类型。试图去访问一个 <code>unknown</code> 类型的变量的属性或对 <code>unknown</code> 类型的变量进行函数调用，TypeScript 都会抛出错误。实际上你不能对 <code>unknown</code> 类型的变量做任何事情，这正是问题的关键。<code>unknown</code> 导致的错误将迫使你主动将其缩窄到适当的类型，因为往往这个时候，你比 TypeScript 了解的更多：</p><div class="language-ts"><pre><code><span class="token keyword">const</span> book <span class="token operator">=</span> <span class="token function">parseYAML</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  name: 聪格尔传\n  author: 狗蛋\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token keyword">as</span> Book <span class="token comment">// 你比 TypeScript 知道的更多，所以使用类型断言来缩窄类型</span>\n\n<span class="token function">alert</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token comment">// ~~~~~~ Property &#39;title&#39; does not exist on type &#39;Book&#39;</span>\n<span class="token function">book</span><span class="token punctuation">(</span><span class="token string">&#39;read&#39;</span><span class="token punctuation">)</span> <span class="token comment">// ~~~~~~~ this expression is not callable</span>\n</code></pre></div><p>因为 <code>unknown</code> 不能直接赋给其它任何类型，所以这里需要用到类型断言 (type assertion)，这也使得错误信息更加清晰明了。</p><p>当你在声明一个变量或返回一个值但还不确定它的类型时，使用 <code>unknown</code> 是一个好的选择，<code>parseYAML</code> 的返回值就是一个例子。</p><p>当然，使用类型断言并不是将 <code>unknown</code> 类型缩窄到具体类型的唯一方法。使用 <code>instanceof</code> 检查也可以：</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">processValue</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    val <span class="token comment">// Type is Date</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>还可以使用类型守卫 (type guard)：</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">isBook</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> val <span class="token keyword">is</span> Book <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">typeof</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> val <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&#39;name&#39;</span> <span class="token keyword">in</span> val <span class="token operator">&amp;&amp;</span> <span class="token string">&#39;author&#39;</span> <span class="token keyword">in</span> val\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">processValue</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBook</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    val <span class="token comment">// Type is Book</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>在双重断言 (double assertion) 中，也可以使用 <code>unknown</code> 替代 <code>any</code>：</p><div class="language-ts"><pre><code><span class="token keyword">declare</span> <span class="token keyword">const</span> foo<span class="token operator">:</span> Foo\n<span class="token keyword">const</span> barAny <span class="token operator">=</span> foo <span class="token keyword">as</span> <span class="token builtin">any</span> <span class="token keyword">as</span> Bar\n<span class="token keyword">const</span> barUnk <span class="token operator">=</span> foo <span class="token keyword">as</span> <span class="token builtin">unknown</span> <span class="token keyword">as</span> Bar\n</code></pre></div><p>虽然它们在功能上是等价的，但如果以后重构需要将双重断言进行分解，<code>unknown</code> 形式的风险更小，因为 <code>any</code> 可以逃脱类型系统的束缚并扩散其它地方，而 <code>unknown</code> 这样做就会导致错误。</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>顺带提一下，你可能会看到使用 <code>object</code> 或 <code>{}</code> 类型的代码，它们的作用与这里的 <code>unknown</code> 类似，也是广义的类型，但范围比 <code>unknown</code> 要稍微窄一些：</p><ul><li><code>{}</code> 类型包含除了 <code>null</code> 和 <code>undefined</code> 之外的所有值</li><li><code>object</code> 类型包含所有 non-primitive 值，例如它不包含 <code>11</code>, <code>true</code>, <code>&#39;foo&#39;</code>，但是包含所有对象和数组</li></ul><p>在 <code>unknown</code> 被引入 TypeScript 之前，<code>{}</code> 使用的比较多，但是现在，你应该使用 <code>unknown</code>，除非你明确知道这个值不可能是 <code>null</code> 或 <code>undefined</code>。</p></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><ul><li><code>unknown</code> 是 <code>any</code> 类型安全的替代品，当你不确定某个值的类型时，应该使用 <code>unknown</code>。</li><li>使用 <code>unknown</code> 可以迫使你的用户使用类型断言或其它类型检查来确保代码的类型安全。</li></ul>',31);var d=n(k,[["render",function(n,p,e,t,l,k){const d=s("PubDate");return c(),a("div",null,[u,o(d,{date:"2021/05/26"}),i])}]]);export{l as __pageData,d as default};
