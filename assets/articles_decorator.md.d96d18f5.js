import{r as n,o as s,c as a,d as p,b as t,e as o,a as c}from"./app.2ac769c5.js";const e='{"title":"装饰者（Decorator）","description":"","frontmatter":{},"headers":[{"level":2,"title":"透明缓存","slug":"透明缓存"},{"level":2,"title":"使用 func.call 设定上下文","slug":"使用-func-call-设定上下文"},{"level":2,"title":"使用 func.apply 来传递多参数","slug":"使用-func-apply-来传递多参数"},{"level":2,"title":"方法借用","slug":"方法借用"},{"level":2,"title":"一些常用的装饰者","slug":"一些常用的装饰者"},{"level":3,"title":"间谍装饰者","slug":"间谍装饰者"},{"level":3,"title":"延迟装饰者","slug":"延迟装饰者"},{"level":3,"title":"去抖装饰者","slug":"去抖装饰者"},{"level":3,"title":"节流装饰者","slug":"节流装饰者"}],"relativePath":"articles/decorator.md","lastUpdated":1632755233785}',u={},l=t("h1",{id:"装饰者（decorator）"},[t("a",{class:"header-anchor",href:"#装饰者（decorator）","aria-hidden":"true"},"#"),o(" 装饰者（Decorator）")],-1),k=c('<p>JavaScript 在处理函数时提供了非凡的灵活性。它们可以被传递，用作对象，现在我们将看到如何在它们之间转发调用并装饰（decorate）它们。</p><h2 id="透明缓存"><a class="header-anchor" href="#透明缓存" aria-hidden="true">#</a> 透明缓存</h2><p>假设我们有一个 CPU 重负载的函数 <code>slow(x)</code>，但它的结果是稳定的。换句话说，对于相同的 <code>x</code>，它总是返回相同的结果。如果经常调用该函数，我们可能希望将结果缓存下来，以避免在重新计算上花费额外的时间。但是我们不是将这个功能添加到 <code>slow()</code> 中，而是创建一个包装器（wrapper）函数，该函数增加了缓存功能：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">slow</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 这里可能会有重负载的 CPU 密集型工作</span>\n  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Called with </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> x\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">cachingDecorator</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 如果缓存中有对应的结果</span>\n      <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// 从缓存中读取结果</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment">// 否则就调用 func</span>\n    cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> result<span class="token punctuation">)</span>  <span class="token comment">// 然后将结果缓存下来</span>\n\n    <span class="token keyword">return</span> result\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nslow <span class="token operator">=</span> <span class="token function">cachingDecorator</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span>\n\n<span class="token function">slow</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 计算并缓存结果</span>\n<span class="token function">slow</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 从缓存中拿结果</span>\n</code></pre></div><p>在上面的代码中，<code>cachingDecorator</code> 是一个装饰者（decorator）：一个特殊的函数，它接受另一个函数并改变它的行为。从外部代码来看，包装的 <code>slow</code> 函数没有发生任何变化，它只是在其行为上添加了缓存功能。</p><p>总而言之，使用分离的 <code>cachingDecorator</code> 而不是改变 <code>slow</code> 本身的代码有几个好处：</p><ul><li><code>cachingDecorator</code> 是可重用的。我们可以将它应用于另一个函数</li><li>缓存逻辑是独立的，它没有增加 <code>slow</code> 本身的复杂性</li><li>如果需要，我们可以组合多个装饰者（其他装饰者遵循同样的逻辑）</li></ul><h2 id="使用-func-call-设定上下文"><a class="header-anchor" href="#使用-func-call-设定上下文" aria-hidden="true">#</a> 使用 <code>func.call</code> 设定上下文</h2><p>上面提到的缓存装饰者不适用于对象方法。例如，在下面的代码中，<code>worker.slow</code> 在装饰后不会正常工作：</p><div class="language-js"><pre><code><span class="token comment">// 我们将对 worker.slow 的结果进行缓存</span>\n<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">1</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token function">slow</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// CPU 密集型任务</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Called with &quot;</span> <span class="token operator">+</span> x<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// (1)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 和之前例子中的代码相同</span>\n<span class="token keyword">function</span> <span class="token function">cachingDecorator</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// (2)</span>\n    cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> result\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nworker<span class="token punctuation">.</span><span class="token function">slow</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 原始方法有效</span>\nworker<span class="token punctuation">.</span>slow <span class="token operator">=</span> <span class="token function">cachingDecorator</span><span class="token punctuation">(</span>worker<span class="token punctuation">.</span>slow<span class="token punctuation">)</span> <span class="token comment">// 现在对其进行缓存</span>\nworker<span class="token punctuation">.</span><span class="token function">slow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// Error: Cannot read property &#39;someMethod&#39; of undefined</span>\n</code></pre></div><p>错误发生在 (1) 中试图访问 <code>this.someMethod</code>，原因是 (2) 中包装器调用原始函数 <code>func(x)</code> 时丢失了 <code>this</code> 上下文，<code>func</code> 函数拿到的 <code>this</code> 为 <code>undefined</code> 。</p><p>要解决这个问题需要用到 JS 函数的一个特殊的内置方法 <code>Function.prototype.call</code>，它允许显式地为函数调用设置 <code>this</code> 上下文，语法如下：</p><div class="language-js"><pre><code><span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>\n</code></pre></div><p>它运行 func，提供的第一个参数作为 <code>this</code>，后面的作为参数。简单地说，这两个调用几乎相同：</p><div class="language-js"><pre><code><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>\n</code></pre></div><p>它们调用的都是 <code>func</code>，参数是 <code>1, 2, 3</code>。唯一的区别是 <code>func.call</code> 还会将 <code>this</code> 设置为 <code>obj</code>。</p><p>在我们的例子中，我们可以在包装器中使用 <code>call</code> 将上下文传递给原始函数：</p><div class="language-js"><pre><code><span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">1</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token function">slow</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Called with &quot;</span> <span class="token operator">+</span> x<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// (1)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">cachingDecorator</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token comment">// 现在 &quot;this&quot; 被正确地传递了</span>\n    cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> result\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nworker<span class="token punctuation">.</span>slow <span class="token operator">=</span> <span class="token function">cachingDecorator</span><span class="token punctuation">(</span>worker<span class="token punctuation">.</span>slow<span class="token punctuation">)</span> <span class="token comment">// 现在对其进行缓存</span>\n\nworker<span class="token punctuation">.</span><span class="token function">slow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 工作正常</span>\nworker<span class="token punctuation">.</span><span class="token function">slow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 工作正常，使用的缓存</span>\n</code></pre></div><p>现在一切都正常工作了。</p><p>为理解地更清晰一些，让我们更深入地看看 <code>this</code> 是如何被传递的：</p><ol><li>在经过装饰之后，<code>worker.slow</code> 现在是包装器 <code>function (x) { ... }</code>。</li><li>因此，当<code> worker.slow(2)</code> 执行时，<code>slow</code> 函数内的 <code>this</code> 指向 <code>worker</code>（指向点符号 <code>.</code> 之前的对象）</li></ol><h2 id="使用-func-apply-来传递多参数"><a class="header-anchor" href="#使用-func-apply-来传递多参数" aria-hidden="true">#</a> 使用 <code>func.apply</code> 来传递多参数</h2><p>上面的 <code>cachingDecorator</code> 装饰者只能用于单参数函数，现在如何缓存多参数 <code>worker.slow</code> 方法呢?</p><div class="language-js"><pre><code><span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">slow</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> min <span class="token operator">+</span> max\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 应该记住相同参数的调用</span>\nworker<span class="token punctuation">.</span>slow <span class="token operator">=</span> <span class="token function">cachingDecorator</span><span class="token punctuation">(</span>worker<span class="token punctuation">.</span>slow<span class="token punctuation">)</span>\n</code></pre></div><p>之前，对于单个参数 <code>x</code>，我们可以只使用 <code>cache.set(x, result)</code> 来保存结果，并使用 <code>cache.get(x)</code> 来检索并获取结果。但是现在我们需要记住参数组合 <code>(min,max)</code>的结果，这里我们可以简单的实现一个哈希（hash）函数将参数组合映射到一个值，然后用这个值作为 map 的键来保存结果。</p><p>现在让我们把 <code>cachingDecorator</code> 写得更加通用，我们需要将 <code>func.call(this, x)</code> 替换成 <code>func.call(this, ...arguments)</code>，以将所有参数传递给包装的函数调用，而不仅仅是只传递第一个参数。</p><p>这是一个更强大的 <code>cachingDecorator</code>：</p><div class="language-js"><pre><code><span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">slow</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Called with </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>min<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>max<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> min <span class="token operator">+</span> max\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">cachingDecorator</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> hash</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span> <span class="token comment">// (1)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">...</span>arguments<span class="token punctuation">)</span> <span class="token comment">// (2)</span>\n\n    cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> result\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span>\n\nworker<span class="token punctuation">.</span>slow <span class="token operator">=</span> <span class="token function">cachingDecorator</span><span class="token punctuation">(</span>worker<span class="token punctuation">.</span>slow<span class="token punctuation">,</span> hash<span class="token punctuation">)</span>\n\nworker<span class="token punctuation">.</span><span class="token function">slow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 工作正常</span>\nworker<span class="token punctuation">.</span><span class="token function">slow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 工作正常，使用的缓存</span>\n</code></pre></div><p>现在这个包装器可以处理任意数量的参数了（尽管哈希函数还需要进行调整以允许任意数量的参数，后面会提到）， 这里有两个变化：</p><ol><li>在 (1) 行中它调用 <code>hash</code> 来从 <code>arguments</code> 创建一个单独的键。这里我们使用一个简单拼接函数，更复杂的情况可能需要其他哈希函数</li><li>然后 (2) 行使用 <code>func.call(this, ...arguments)</code> 将包装器获得的上下文和所有参数传递给原始函数</li></ol><p>我们也可以使用 <code>func.apply(this, arguments)</code> 代替 <code>func.call(this, ...arguments)</code>，<code>call</code> 和 <code>apply</code> 之间唯一的语法区别是，<code>call</code> 期望一个参数列表，而 <code>apply</code> 期望一个包含这些参数的类数组对象。因此，这两个调用几乎是等效的：</p><div class="language-js"><pre><code><span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token comment">// 使用 spread 语法将数组作为列表传递</span>\n<span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>   <span class="token comment">// 与使用 call 相同</span>\n</code></pre></div><p>这里只有很小的区别：</p><ul><li>spread 语法 <code>...</code> 允许将可迭代对象 <code>args</code> 作为列表传递给 <code>call</code>。</li><li><code>apply</code> 仅接受类数组对象 <code>args</code>。</li></ul><p>对于即可迭代又是类数组的对象，例如一个真正的数组，从技术上讲我们使用 <code>call</code> 或 <code>apply</code> 都行，但是 <code>apply</code> 可能会更快，因为大多数 JavaScript 引擎在内部对其进行了优化。</p><p>将所有参数连同上下文一起传递给另一个函数被称为“呼叫转移（call forwarding）”，这是它的最简形式：</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">wrapper</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>当外部代码调用这种包装器 <code>wrapper</code> 时，它与原始函数 <code>func</code> 的调用是无法区分的。</p><h2 id="方法借用"><a class="header-anchor" href="#方法借用" aria-hidden="true">#</a> 方法借用</h2><p>上面例子中的哈希函数仅适用于两个参数。如果它可以适用于任何数量的参数就更好了，自然想到的解决方案是使用 <code>arr.join</code> 方法：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>……不幸的是，这不行。因为我们正在调用 <code>hash(arguments)</code>，函数内部变量 <code>arguments</code> 只是一个可迭代的类数组对象，它并不是真正的数组，所以在它上面调用 join 会失败。</p><p>不过，有一种简单的方法可以使用数组的 <code>join</code> 方法:</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">hash</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// ok &#39;1,2&#39;</span>\n</code></pre></div><p>这个技巧被称为<strong>方法借用</strong>（method borrowing），我们从常规数组 <code>[]</code> 中借用 <code>join</code> 方法，并使用 <code>[].join.call</code> 在 <code>arguments</code> 的上下文中运行它。</p><p>它为什么有效？</p><p>那是因为原生方法 <code>arr.join(sep)</code> 的内部算法非常简单：</p><ol><li>让 <code>sep</code> 成为第一个参数，如果没有参数，则使用逗号 <code>,</code></li><li>让 <code>result</code> 为空字符串</li><li>将 <code>this[0]</code> 附加到 <code>result</code></li><li>附加 <code>sep</code> 和 <code>this[1]</code></li><li>附加 <code>sep</code> 和 <code>this[2]</code></li><li>……以此类推，直到 <code>this.length</code> 个项被粘在一起</li><li>返回 <code>result</code></li></ol><p>因此，从技术上讲，它需要 <code>this</code> 并将 <code>this[0]</code>，<code>this[1]</code> ...等 <code>join</code> 在一起。它的编写方式是故意允许任何类数组的 <code>this</code> 的（不是巧合，很多方法都遵循这种做法）。这就是为什么它也可以和 <code>this=arguments</code> 一起使用。</p><p>通常，用装饰的函数替换一个函数或一个方法是安全的，除了一个例外：如果原始函数上有自己的属性，则装饰后的函数将不再提供这些属性。例如在上面的示例中，如果 <code>slow</code> 函数具有任何属性，而 <code>cachingDecorator(slow)</code> 则是一个没有这些属性的包装器。一些包装器可能会提供自己的属性。例如，装饰者会计算一个函数被调用了多少次以及花费了多少时间，并通过包装器属性暴露这些信息。</p><h2 id="一些常用的装饰者"><a class="header-anchor" href="#一些常用的装饰者" aria-hidden="true">#</a> 一些常用的装饰者</h2><h3 id="间谍装饰者"><a class="header-anchor" href="#间谍装饰者" aria-hidden="true">#</a> 间谍装饰者</h3><p>创建一个装饰者 <code>spy(func)</code>，它应该返回一个包装器，该包装器将所有对函数的调用保存在其 <code>calls</code> 属性中，每个调用都保存为一个参数数组。</p><p>例如：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">alert</span><span class="token punctuation">(</span> a <span class="token operator">+</span> b <span class="token punctuation">)</span> <span class="token comment">// work 是一个任意的函数</span>\n<span class="token punctuation">}</span>\n\nwork <span class="token operator">=</span> <span class="token function">spy</span><span class="token punctuation">(</span>work<span class="token punctuation">)</span>\n\n<span class="token function">work</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 3</span>\n<span class="token function">work</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 9</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> args <span class="token keyword">of</span> work<span class="token punctuation">.</span>calls<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;call:&#39;</span> <span class="token operator">+</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment">// &quot;call:1,2&quot;, &quot;call:4,5&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>解决方案：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">spy</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">function</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 使用 ...args 而不是 arguments 来获取真正的参数数组</span>\n    wrapper<span class="token punctuation">.</span>calls<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  wrapper<span class="token punctuation">.</span>calls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> wrapper<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="延迟装饰者"><a class="header-anchor" href="#延迟装饰者" aria-hidden="true">#</a> 延迟装饰者</h3><p>创建一个装饰者<code> delay(f, ms)</code>，该装饰者将 <code>f</code> 的每次调用延时 <code>ms</code> 毫秒。</p><p>例如：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// create wrappers</span>\n<span class="token keyword">const</span> f1000 <span class="token operator">=</span> <span class="token function">delay</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> f1500 <span class="token operator">=</span> <span class="token function">delay</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">)</span>\n\n<span class="token function">f1000</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 在 1000ms 后显示 &quot;hello&quot;</span>\n<span class="token function">f1500</span><span class="token punctuation">(</span><span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 在 1500ms 后显示 &quot;world&quot;</span>\n</code></pre></div><p>解决方案：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token parameter">f<span class="token punctuation">,</span> ms</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">f</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">,</span> ms<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>注意这里使用的是箭头函数（arrow function），我们知道，箭头函数没有自己的 <code>this</code> 和 <code>arguments</code>，所以 <code>f.apply(this, arguments)</code> 从包装器中获取 <code>this</code> 和 <code>arguments</code>，这正是我们需要的。 如果使用常规函数，我们仍然可以通过使用中间变量来传递正确的 <code>this</code>，但这有点麻烦：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token parameter">f<span class="token punctuation">,</span> ms</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> savedThis <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment">// 将 this 存储到中间变量</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">f</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>savedThis<span class="token punctuation">,</span> args<span class="token punctuation">)</span> \n    <span class="token punctuation">}</span><span class="token punctuation">,</span> ms<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="去抖装饰者"><a class="header-anchor" href="#去抖装饰者" aria-hidden="true">#</a> 去抖装饰者</h3><p><code>debounce(f, ms)</code> 装饰者的结果应该是一个包装器，该包装器最多允许每隔 <code>ms</code> 毫秒将调用传递给 <code>f</code> 一次。</p><p>换句话说，当我们调用 debounced 函数时，它保证之后所有在距离上一次调用的时间间隔少于 <code>ms</code> 毫秒的调用都会被忽略。</p><p>例如：</p><div class="language-js"><pre><code><span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span>alert<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 立即执行</span>\n<span class="token function">f</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 被忽略</span>\n\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// 被忽略（只过去了 100 ms）</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1100</span><span class="token punctuation">)</span> <span class="token comment">// 运行</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">)</span> <span class="token comment">// 被忽略（距上一次运行不超过 1000 ms）</span>\n</code></pre></div><p>在实际中，对于那些用于检索/更新某些内容的函数而言，当我们知道在短时间内不会有什么新内容的时候，<code>debounce</code> 就显得很有用，可以减少浪费资源。</p><p>解决方案：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">f<span class="token punctuation">,</span> ms</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> isCoolDown <span class="token operator">=</span> <span class="token boolean">false</span>\n\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>isCoolDown<span class="token punctuation">)</span> <span class="token keyword">return</span>\n\n    <span class="token function">f</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>\n\n    isCoolDown <span class="token operator">=</span> <span class="token boolean">true</span>\n\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> isCoolDown <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> ms<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="节流装饰者"><a class="header-anchor" href="#节流装饰者" aria-hidden="true">#</a> 节流装饰者</h3><p>创建一个装饰者 <code>throttle(f, ms)</code>，它返回一个包装器，最多每隔 <code>ms</code> 毫秒将调用传递给 <code>f</code> 一次。那些属于冷却期的调用将被忽略。</p><p>与 <code>debounce</code> 的区别是，如果被忽略的调用是冷却期间的最后一次，那么它会在延时结束时执行。</p><p>例如：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// f1000 最多每 1000ms 将调用传递给 f 一次</span>\n<span class="token keyword">let</span> f1000 <span class="token operator">=</span> <span class="token function">throttle</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n\n<span class="token function">f1000</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 显示 1</span>\n<span class="token function">f1000</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// (节流，尚未到 1000ms)</span>\n<span class="token function">f1000</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// (节流，尚未到 1000ms)</span>\n\n<span class="token comment">// 当 1000ms 时间到...</span>\n<span class="token comment">// ...输出 3，中间值 2 被忽略</span>\n</code></pre></div><p>解决方案：</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">f<span class="token punctuation">,</span> ms</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">let</span> isCoolDown <span class="token operator">=</span> <span class="token boolean">false</span>\n  <span class="token keyword">let</span> savedArgs\n  <span class="token keyword">let</span> savedThis\n\n  <span class="token keyword">function</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>isCoolDown<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// (2)</span>\n      savedArgs <span class="token operator">=</span> arguments\n      savedThis <span class="token operator">=</span> <span class="token keyword">this</span>\n      <span class="token keyword">return</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token function">f</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span> <span class="token comment">// (1)</span>\n\n    isCoolDown <span class="token operator">=</span> <span class="token boolean">true</span>\n\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      isCoolDown <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// (3)</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>savedArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">wrapper</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>savedThis<span class="token punctuation">,</span> savedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        savedArgs <span class="token operator">=</span> savedThis <span class="token operator">=</span> <span class="token keyword">null</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> ms<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> wrapper\n<span class="token punctuation">}</span>\n</code></pre></div><ol><li>在第一次调用期间，<code>wrapper</code> 只运行 <code>f</code> 并设置冷却状态 <code>isCoolDown = true</code></li><li>在这种状态下，所有调用都记忆在 <code>savedArgs/savedThis</code> 中。请注意，上下文和参数（arguments）同等重要，应该被记下来，我们需要他们以重现调用</li><li>然后经过 <code>ms</code> 毫秒后，触发 <code>setTimeout</code>，冷却状态被移除 <code>isCoolDown = false</code>，如果我们忽略了调用，则将使用最后记忆的参数和上下文执行 <code>wrapper</code></li></ol><p>第 3 步运行的是 <code>wrapper</code>，而不是 <code>func</code>，因为我们不仅需要执行 <code>func</code>，还需要再次进入冷却状态并设置 <code>setTimeout</code> 以重置它。</p>',82);u.render=function(t,o,c,e,u,i){const r=n("PubDate");return s(),a("div",null,[l,p(r,{date:"2020/09/07"}),k])};export{e as __pageData,u as default};
