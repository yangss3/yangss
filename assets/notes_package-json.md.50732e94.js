import{_ as e,c as s,o as n,a}from"./app.99a69550.js";const o='{"title":"package.json 配置说明","description":"","frontmatter":{},"headers":[{"level":2,"title":"name","slug":"name"},{"level":2,"title":"version","slug":"version"},{"level":2,"title":"description","slug":"description"},{"level":2,"title":"keywords","slug":"keywords"},{"level":2,"title":"homepage","slug":"homepage"},{"level":2,"title":"bugs","slug":"bugs"},{"level":2,"title":"license","slug":"license"},{"level":2,"title":"author 和 contributors","slug":"author-和-contributors"},{"level":2,"title":"files","slug":"files"},{"level":2,"title":"main","slug":"main"},{"level":2,"title":"bin","slug":"bin"},{"level":2,"title":"directories","slug":"directories"},{"level":2,"title":"repository","slug":"repository"},{"level":2,"title":"scripts","slug":"scripts"},{"level":2,"title":"peerDependencies","slug":"peerdependencies"},{"level":2,"title":"engines","slug":"engines"},{"level":2,"title":"private","slug":"private"},{"level":2,"title":"publishConfig","slug":"publishconfig"},{"level":2,"title":"preferGlobal","slug":"preferglobal"},{"level":2,"title":"config","slug":"config"}],"relativePath":"notes/package-json.md","lastUpdated":1640183262459}',t={},p=[a('<h1 id="package-json-配置说明" tabindex="-1">package.json 配置说明 <a class="header-anchor" href="#package-json-配置说明" aria-hidden="true">#</a></h1><h2 id="name" tabindex="-1">name <a class="header-anchor" href="#name" aria-hidden="true">#</a></h2><p><code>package.json</code> 文件中最重要的就是 <code>name</code> 和 <code>version</code> 字段，这两项是必填的。名称和版本一起构成一个标识符，该标识符被认为是完全唯一的。对包的更改应该与对版本的更改一起进行。</p><p><code>name</code> 必须小于等于214个字符，不能以 <code>.</code> 或 <code>_</code> 开头，不能有大写字母，因为名称最终成为 URL 的一部分因此不能包含任何非 URL 安全字符。 npm 官方建议我们不要使用与核心 node 模块相同的名称。不要在名称中包含 <code>&#39;js&#39;</code> 或 <code>&#39;node&#39;</code>。如果需要可以使用 <code>engines</code> 字段来指定运行环境。</p><p>该名称会作为参数传递给 <code>require</code>，因此它应该是简短的，但也需要具有合理的描述性。</p><h2 id="version" tabindex="-1">version <a class="header-anchor" href="#version" aria-hidden="true">#</a></h2><p><code>version</code> 一般的格式是 <code>x.x.x</code>, 并且需要遵循该规则。每次发布时 <code>version</code> 不能与已存在的一致。</p><h2 id="description" tabindex="-1">description <a class="header-anchor" href="#description" aria-hidden="true">#</a></h2><p><code>description</code> 是一个字符串，用于描述你的包信息。有助于人们在 npm 库中搜索的时候发现你的模块。</p><h2 id="keywords" tabindex="-1">keywords <a class="header-anchor" href="#keywords" aria-hidden="true">#</a></h2><p><code>keywords</code> 是一个字符串组成的数组，有助于人们在 npm 库中搜索的时候发现你的模块。</p><h2 id="homepage" tabindex="-1">homepage <a class="header-anchor" href="#homepage" aria-hidden="true">#</a></h2><p>项目的主页地址。</p><h2 id="bugs" tabindex="-1">bugs <a class="header-anchor" href="#bugs" aria-hidden="true">#</a></h2><p>用于项目问题的反馈，可以包含项目 issue 地址，或者是一个邮箱</p><div class="language-json"><pre><code><span class="token property">&quot;bugs&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> \n  <span class="token property">&quot;url&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;https://github.com/owner/project/issues&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;email&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;project@hostname.com&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="license" tabindex="-1">license <a class="header-anchor" href="#license" aria-hidden="true">#</a></h2><p>当前项目的协议，让用户知道他们有何权限来使用你的模块，以及使用该模块有哪些限制。</p><h2 id="author-和-contributors" tabindex="-1">author 和 contributors <a class="header-anchor" href="#author-和-contributors" aria-hidden="true">#</a></h2><p><code>author</code> 是具体一个人，<code>contributors</code> 表示一群人，他们都表示当前项目的共享者。同时每个人都是一个对象。具有 <code>name</code> 字段和可选的 <code>url</code> 及<code>email</code> 字段。</p><div class="language-json"><pre><code><span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">&quot;name&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;yangss&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;email&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;yangss@xxx.com&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;url&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;https://yangss.com/&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>也可以写成一个字符串:</p><div class="language-json"><pre><code><span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;yangss yangss@xx.com (https://yangss.com/)&quot;</span>\n</code></pre></div><h2 id="files" tabindex="-1">files <a class="header-anchor" href="#files" aria-hidden="true">#</a></h2><p>用于指定发布模块时需要包含的文件。<code>files</code> 属性的值是一个数组，内容是模块下文件名或者文件夹名，如果是文件夹名，则文件夹下所有的文件也会被包含进来。</p><p>可以在模块根目录下创建一个 <code>.npmignore</code> 文件，写在这个文件里边的文件即便被写在 <code>files</code> 属性里也会被排除在外，这个文件的写法与 <code>.gitignore</code> 类似。</p><h2 id="main" tabindex="-1">main <a class="header-anchor" href="#main" aria-hidden="true">#</a></h2><p>指定模块加载的入口文件，<code>require</code> 导入的时候就会加载这个文件。这个字段的默认值是模块根目录下面的 <code>index.js</code>。</p><h2 id="bin" tabindex="-1">bin <a class="header-anchor" href="#bin" aria-hidden="true">#</a></h2><p>指定每个内部命令对应的可执行文件的位置。如果你编写的是一个 node 命令行工具时会用到 <code>bin</code> 字段：</p><div class="language-json"><pre><code><span class="token property">&quot;bin&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">&quot;foo&quot;</span><span class="token operator">:</span> <span class="token string">&quot;bin/foo.js&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>如果全局安装这个模块，我们在命令行中输入 <code>foo</code>， node 会去执行 <code>bin/foo.js</code> 这个文件。</p><p>如果作为项目依赖的方式局部安装这个模块，在 <code>node_modules/.bin/</code> 生成对应的文件， npm 会寻找这个文件，在<code>node_modules/.bin/</code> 目录下建立符号链接。由于 <code>node_modules/.bin/</code> 目录会在运行时加入系统的 <code>PATH</code> 变量，因此在运行 <code>npm</code> 时，就可以不带路径，直接通过命令来调用这些脚本 所有 <code>node_modules/.bin/</code> 目录下的命令，都可以用 <code>npm run [命令]</code> 的格式运行</p><h2 id="directories" tabindex="-1">directories <a class="header-anchor" href="#directories" aria-hidden="true">#</a></h2><p>制定一些方法来描述模块的结构, 用于告诉用户每个目录在什么位置。</p><h2 id="repository" tabindex="-1">repository <a class="header-anchor" href="#repository" aria-hidden="true">#</a></h2><p>指定一个代码存放地址，对想要为你的项目贡献代码的人有帮助</p><div class="language-json"><pre><code><span class="token property">&quot;repository&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">&quot;type&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;git&quot;</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;url&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;https://github.com/npm/npm.git&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="scripts" tabindex="-1">scripts <a class="header-anchor" href="#scripts" aria-hidden="true">#</a></h2><p>用于配置 npm 脚本命令，可以给项目中需要经常运行的脚本命令定义一个别名：</p><div class="language-json"><pre><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node ./start.js&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><code>scripts</code> 可以直接调用 <code>node_modules</code> 中安装的模块（如果这个模块提供了命令行运行的模式）：</p><div class="language-json"><pre><code><span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;webpack&quot;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// npm run build =&gt; npx webpack</span>\n</code></pre></div><h2 id="peerdependencies" tabindex="-1">peerDependencies <a class="header-anchor" href="#peerdependencies" aria-hidden="true">#</a></h2><p>如果你的模块依赖于某一个模块，但是你又不想将其作为本模块的依赖进行安装（比如这个模块可能被其它很多模块使用），可以使用 <code>peerDependencies</code> 字段来指定这个模块，以及所需要的版本，</p><div class="language-js"><pre><code><span class="token punctuation">{</span>\n  <span class="token string">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my-less-plugin&quot;</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;peerDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;less&quot;</span><span class="token operator">:</span> <span class="token string">&quot;3.9.x&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="engines" tabindex="-1">engines <a class="header-anchor" href="#engines" aria-hidden="true">#</a></h2><p><code>engines</code> 字段指明了该模块运行的平台，比如 <code>node</code> 或者 <code>npm</code> 的某个版本或者浏览器</p><div class="language-json"><pre><code><span class="token property">&quot;engines&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> \n  <span class="token property">&quot;node&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;&gt;=0.10.3 &lt;0.12&quot;</span><span class="token punctuation">,</span> \n  <span class="token property">&quot;npm&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;~1.0.20&quot;</span> \n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="private" tabindex="-1">private <a class="header-anchor" href="#private" aria-hidden="true">#</a></h2><p>如果这个属性被设置为 <code>true</code>，npm 将拒绝发布它，这是为了防止一个私有模块被无意间发布出去。</p><div class="language-json"><pre><code><span class="token property">&quot;private&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>\n</code></pre></div><h2 id="publishconfig" tabindex="-1">publishConfig <a class="header-anchor" href="#publishconfig" aria-hidden="true">#</a></h2><h2 id="preferglobal" tabindex="-1">preferGlobal <a class="header-anchor" href="#preferglobal" aria-hidden="true">#</a></h2><p><code>preferGlobal</code> 的值是布尔值，表示当用户不将该模块安装为全局模块时（即不用<code>--global/-g</code>参数），要不要显示警告，表示该模块的本意就是安装为全局模块。</p><div class="language-json"><pre><code><span class="token property">&quot;preferGlobal&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>\n</code></pre></div><h2 id="config" tabindex="-1">config <a class="header-anchor" href="#config" aria-hidden="true">#</a></h2>',57)];var r=e(t,[["render",function(e,a,o,t,r,c){return n(),s("div",null,p)}]]);export{o as __pageData,r as default};
