import{o as n,c as s,a}from"./app.7a2a5498.js";const t='{"title":"setTimeout 和 setInterval","description":"","frontmatter":{},"relativePath":"articles/settimeout-setinterval.md","lastUpdated":1632325019973}',p={},o=[a('<h1 id="settimeout-和-setinterval"><a class="header-anchor" href="#settimeout-和-setinterval" aria-hidden="true">#</a> setTimeout 和 setInterval</h1><p>这里不介绍这两个函数的具体用法，主要说说周期性调度的问题。</p><p>周期性调度一般有两种方式，一种是使用 <code>setInterval</code>：</p><div class="language-js"><pre><code><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">func</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>\n</code></pre></div><p>另外一种是嵌套的 <code>setTimeout</code>：</p><div class="language-js"><pre><code><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">func</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span>run<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>\n\n</code></pre></div><p><code>setInterval</code> 虽然很直观，内部的调度程序每间隔 100 毫秒执行一次 <code>func(i++)</code>，但是嵌套的 <code>setTimeout</code> 却有很多 <code>setInterval</code> 不具备的优点。</p><p><strong>嵌套的 <code>setTimeout</code> 能够精确地设置两次执行之间的延时</strong></p><p>你会发现使用 <code>setInterval</code> 时，<code>func</code> 函数的实际调用间隔要比代码中设定的时间间隔要短，因为 <code>func</code> 自身执行所花费的时间消耗了一部分间隔时间。也可能出现这种情况，就是 <code>func</code> 的执行所花费的时间比我们预期的时间更长，并且超出了 100 毫秒。在这种情况下，JavaScript 引擎会等待 <code>func</code> 执行完成，然后检查调度程序，如果时间到了，则立即执行它。极端情况下，如果函数每次执行时间都超过了设置的延迟时间，那么每次调用之间将完全没有停顿。 但是嵌套的 <code>setTimeout</code> 没有有这样的问题，嵌套的 <code>setTimeout</code> 能确保延时的固定，这是因为下一次调用是在前一次调用完成时再调度的。</p><p><strong>嵌套的 <code>setTimeout</code> 比 <code>setInterval</code> 要灵活得多</strong></p><p>用嵌套的 <code>setTimeout</code> 可以根据当前执行结果来调度下一次调用，因此下一次调用可以与当前这一次不同。</p><p>例如，我们要实现一个服务，每间隔 5 秒向服务器发送一个数据请求，但如果服务器过载了，那么就要降低请求频率，比如将间隔增加到 10、20、40 秒等，以下是伪代码</p><div class="language-js"><pre><code><span class="token keyword">let</span> delay <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> timerId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  发送请求 <span class="token operator">...</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>request failed due to server overload<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 下一次执行的间隔是当前的 2 倍</span>\n    delay <span class="token operator">*=</span> <span class="token number">2</span>\n  <span class="token punctuation">}</span>\n\n  timerId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> delay<span class="token punctuation">)</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>\n</code></pre></div><p>并且，如果我们调度的函数占用大量的 CPU，那么我们可以测量执行所需要花费的时间，并安排下次调用是应该提前还是推迟。</p><p><strong>可以用 <code>setTimeout(func, 0)</code> 分割 CPU 高占用的任务</strong></p><p>当某项任务执行所消耗时间很长时，有时候会导致浏览器挂起，这种情况是显然不能接受的。</p><p>为了方便理解，来考虑一个稍微简单点的例子。比如我们有个函数，从 1 数到 1000000000</p><div class="language-js"><pre><code><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>\n\n<span class="token keyword">let</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token comment">// 执行一个耗时的任务</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1e9</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    i<span class="token operator">++</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Done in &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;ms&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><p>运行时，会观察到 CPU 挂起，服务器端 JS 表现的尤为明显。如果在浏览器下运行，试试点击页面的其他按钮，你会发现整个 JavaScript 的执行都暂停了，除非等这段代码运行完，否则什么也做不了。</p><p>下面用 <code>setTimeout</code> 分割任务：</p><div class="language-js"><pre><code><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span>\n\n<span class="token keyword">const</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token comment">// 先完成一部分任务(*)</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">1e6</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    i<span class="token operator">++</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1e9</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Done in &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;ms&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 安排下一次任务</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre></div><p>现在，浏览器的 UI 界面即使在计数正在进行的情况下也能正常工作了，<code>count</code> 函数调用的间隙能够让 JavaScript 引擎缓一口气，浏览器趁这段时间可以对用户的操作作出回应。 而且用 <code>setTimeout</code> 进行分割和不分割这两种做法在执行速度方面几乎没什么差别。</p>',22)];p.render=function(a,t,p,e,c,u){return n(),s("div",null,o)};export{t as __pageData,p as default};
