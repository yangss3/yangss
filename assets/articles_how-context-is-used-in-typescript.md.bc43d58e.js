import{_ as n,r as s,c as a,b as p,d as t,e,a as o,o as c}from"./app.04efe956.js";const l='{"title":"理解上下文 (Context) 在类型推断中的作用","description":"","frontmatter":{},"headers":[{"level":2,"title":"Tuple 类型","slug":"tuple-类型"},{"level":2,"title":"对象类型","slug":"对象类型"},{"level":2,"title":"总结","slug":"总结"}],"relativePath":"articles/how-context-is-used-in-typescript.md","lastUpdated":1641909010327}',u={},i=t("h1",{id:"理解上下文-context-在类型推断中的作用",tabindex:"-1"},[e("理解上下文 (Context) 在类型推断中的作用 "),t("a",{class:"header-anchor",href:"#理解上下文-context-在类型推断中的作用","aria-hidden":"true"},"#")],-1),r=o('<p>TypeScript 在进行类型推断时，不仅会利用值 (value) 还会考虑值出现的上下文。这通常工作的很好，但是有时候也会带来一些问题。理解 TypeScript 是如何使用上下文 (context) 的，有助于我们理解问题的原因，并知道如何避免和解决它们。</p><p>在 JavaScript 中，我们很容易从一个表达式中分解出一个变量，而不改变代码的行为。例如下面两段代码是等价：</p><div class="language-js"><pre><code><span class="token comment">// 字面量调用</span>\n<span class="token function">setLanguage</span><span class="token punctuation">(</span><span class="token string">&#39;JavaScript&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 拆分出变量</span>\n<span class="token keyword">let</span> language <span class="token operator">=</span> <span class="token string">&#39;JavaScript&#39;</span>\n<span class="token function">setLanguage</span><span class="token punctuation">(</span>language<span class="token punctuation">)</span>\n</code></pre></div><p>在 TypeScript 中，这样的分解也没问题：</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">setLanguage</span><span class="token punctuation">(</span>language<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>\n\n<span class="token function">setLanguage</span><span class="token punctuation">(</span><span class="token string">&#39;JavaScript&#39;</span><span class="token punctuation">)</span> <span class="token comment">// ok</span>\n\n<span class="token keyword">let</span> language <span class="token operator">=</span> <span class="token string">&#39;JavaScript&#39;</span>\n<span class="token function">setLanguage</span><span class="token punctuation">(</span>language<span class="token punctuation">)</span> <span class="token comment">// ok</span>\n</code></pre></div><p>但是通常的最佳实践是，我们应该尽可能的将字符串声明为更精确的字符串字面量的联合类型：</p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">Language</span> <span class="token operator">=</span> <span class="token string">&#39;JavaScript&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;TypeScript&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;Python&#39;</span>\n<span class="token keyword">function</span> <span class="token function">setLanguage</span><span class="token punctuation">(</span>language<span class="token operator">:</span> Language<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>\n\n<span class="token function">setLanguage</span><span class="token punctuation">(</span><span class="token string">&#39;JavaScript&#39;</span><span class="token punctuation">)</span> <span class="token comment">// ok</span>\n\n<span class="token keyword">let</span> language <span class="token operator">=</span> <span class="token string">&#39;JavaScript&#39;</span>\n<span class="token function">setLanguage</span><span class="token punctuation">(</span>language<span class="token punctuation">)</span> <span class="token comment">// ~~~~~~ Argument of type &#39;string&#39; is not assignable to parameter of type &#39;Language&#39;</span>\n</code></pre></div><p>问题出现了。当分解出独立的变量后，再调用 <code>setLanguage</code> 就无法通过类型检查。</p><p>问题出在哪？首先，TypeScript 根据 <code>setLanguage</code> 的函数声明知道它的参数是 <code>Language</code> 类型，而字符串字面量 <code>&#39;JavaScript&#39;</code> 是可以赋给 <code>Language</code> 类型的，所以 <code>setLanguage(&#39;JavaScript&#39;)</code> 没问题。但是如果分解出一个变量，TypeScript 会在变量第一次赋值时推断出它i的类型，这里 <code>language</code> 会被推断为 <code>string</code> 类型，而 <code>string</code> 无法赋值给 <code>Language</code>，因为它代表的值集更大。所以 <code>setLanguage(language)</code> 会报错。</p><p>有两个方法可以解决这个问题。一个是为变量 <code>language</code> 添加类型声明以限制其类型：</p><div class="language-ts"><pre><code><span class="token keyword">let</span> language<span class="token operator">:</span> Language <span class="token operator">=</span> <span class="token string">&#39;JavaScript&#39;</span>\n<span class="token function">setLanguage</span><span class="token punctuation">(</span>language<span class="token punctuation">)</span> <span class="token comment">// ok</span>\n</code></pre></div><p>这样做还有一个好处就是可以充分利用类型检查，更早的发现类似拼写错误等 bug。</p><p>另一个方法是将变量声明成 <code>const</code>：</p><div class="language-ts"><pre><code><span class="token keyword">const</span> language <span class="token operator">=</span> <span class="token string">&#39;JavaScript&#39;</span>\n<span class="token function">setLanguage</span><span class="token punctuation">(</span>language<span class="token punctuation">)</span> <span class="token comment">// ok</span>\n</code></pre></div><p>通过 <code>const</code> 关键字， TypeScript 知道 <code>language</code> 不会被更改，所以它推断出 <code>language</code> 为字面量类型 <code>&#39;JavaScript&#39;</code>，这是可以赋值给 <code>Language</code> 类型的。</p><p>出现上面这个问题根源是我们将值从使用它的上下文 (Context) 中分离了出来，有时候这没问题，但大多情况下不能正常工作。</p><p>下面再来看看几个丢失上下文导致错误的例子，以及应该如何解决它们。</p><h2 id="tuple-类型" tabindex="-1">Tuple 类型 <a class="header-anchor" href="#tuple-类型" aria-hidden="true">#</a></h2><p>除了字符串字面类型 (string literal type)，tuple 类型也会出现上面的情况，看下面的例子：</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">locate</span><span class="token punctuation">(</span>where<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>\n\n<span class="token function">locate</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// ok</span>\n\n<span class="token keyword">const</span> pos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span>\n<span class="token function">locale</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span> <span class="token comment">// ~~~~~~ Argument of type &#39;number[]&#39; is not assignable to parameter of type &#39;[number, number]&#39;</span>\n</code></pre></div><p>发生了什么？ 首先，直接传入字面量 <code>locate([10, 20])</code>，没有问题，道理和上面一样。那为什么 <code>locate[pos]</code> 不行，我们已经使用了 <code>const</code> 声明。</p><p>因为使用 <code>const</code> 声明数组只能提供 shallow constant，TypeScript 只能推断出 <code>pos</code> 的类型为 <code>number[]</code>，无法确定其元素个数。而 <code>number[]</code> 类型无法赋值给 tuple 类型。</p><p>如何在不使用 <code>any</code> 的情况下解决这个问题？</p><p>同样你可以为 <code>pos</code> 添加类型声明，让 TypeScript 准确知道你的意图，而不是让它通过 shallow const 去推断：</p><div class="language-ts"><pre><code><span class="token keyword">const</span> pos<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span>\n<span class="token function">locate</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span> <span class="token comment">// ok</span>\n</code></pre></div><p>还有一种可行的办法是使用 <code>as const</code> 断言，告诉 TypeScript 希望对 <code>pos</code> 深度 constant：</p><div class="language-ts"><pre><code><span class="token keyword">const</span> pos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span>\n<span class="token function">locate</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span> <span class="token comment">// ~~~~~~ Type &#39;readonly [10, 20]&#39; is &#39;readonly&#39; and cannot be assigned to the mutable type &#39;[number, number]&#39;</span>\n</code></pre></div><p>还是不行！如果你在编辑器里将鼠标 hover 到 <code>pos</code> 上，会看到它的类型被推断为 <code>readonly [10, 20]</code>，这太精确了，因为 <code>locate</code> 函数并不保证不会更改它的参数 <code>where</code> 的内容，所以无法通过类型检查。一个直观的解决办法是给 <code>locate</code> 的参数加上 <code>readonly</code> 声明：</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token function">locate</span><span class="token punctuation">(</span>where<span class="token operator">:</span> <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> pos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span>\n<span class="token function">locate</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span> <span class="token comment">// ok</span>\n</code></pre></div><p>但如果这违背了你的本意，那你还是应该使用类型声明。</p><p>使用 <code>const</code> 上下文可以巧妙地解决在类型推断中丢失上下文的问题，但是这也有缺点。如果你在定义时就犯了错误，这个错误不会立即暴露出来，而是在使用时才抛出。这就可能造成迷惑，特别是如果错误发生在深度嵌套的对象中，你很难分辨错误的源头在哪里：</p><div class="language-ts"><pre><code><span class="token keyword">const</span> pos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span> <span class="token comment">// 错误其实发生在这里</span>\n\n<span class="token function">locate</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span> <span class="token comment">// ~~~~~~ Argument of type &#39;readonly [10, 20, 30]&#39; is not assignable to</span>\n            <span class="token comment">// parameter of type &#39;readonly [number, number]&#39;</span>\n            <span class="token comment">// Types of property &#39;length&#39; are incompatible</span>\n            <span class="token comment">// Type &#39;3&#39; is not assignable to type &#39;2&#39;</span>\n</code></pre></div><h2 id="对象类型" tabindex="-1">对象类型 <a class="header-anchor" href="#对象类型" aria-hidden="true">#</a></h2><p>将包含一些字符串字面值或元组 (tuple) 的对象从其上下文分离时，也会出现上面的问题：</p><div class="language-ts"><pre><code><span class="token keyword">type</span> <span class="token class-name">Language</span> <span class="token operator">=</span> <span class="token string">&#39;JavaScript&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;TypeScript&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;Python&#39;</span>\n<span class="token keyword">interface</span> <span class="token class-name">ProgrammingLanguage</span> <span class="token punctuation">{</span>\n language<span class="token operator">:</span> Language\n organization<span class="token operator">:</span> <span class="token builtin">string</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">learning</span><span class="token punctuation">(</span>language<span class="token operator">:</span> ProgrammingLanguage<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>\n\n<span class="token function">learning</span><span class="token punctuation">(</span><span class="token punctuation">{</span> language<span class="token operator">:</span> <span class="token string">&#39;TypeScript&#39;</span><span class="token punctuation">,</span> organization<span class="token operator">:</span> <span class="token string">&#39;Microsoft&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// OK</span>\n\n<span class="token keyword">const</span> ts <span class="token operator">=</span> <span class="token punctuation">{</span>\n language<span class="token operator">:</span> <span class="token string">&#39;TypeScript&#39;</span><span class="token punctuation">,</span>\n organization<span class="token operator">:</span> <span class="token string">&#39;Microsoft&#39;</span>\n<span class="token punctuation">}</span>\n<span class="token function">learning</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span> <span class="token comment">// ~~~~~~ Argument of type &#39;{ language: string; organization: string; }&#39;</span>\n            <span class="token comment">// is not assignable to parameter of type &#39;ProgrammingLanguage&#39;</span>\n            <span class="token comment">// Types of property &#39;language&#39; are incompatible</span>\n            <span class="token comment">// Type &#39;string&#39; is not assignable to type &#39;Language&#39;</span>\n</code></pre></div><p>问题出在 <code>ts</code> 对象中的 <code>language</code> 被推断为 <code>string</code> 类型。解决办法同上面一样，可以为 <code>ts</code> 加上类型声明 (<code>const ts: ProgrammingLanguage = ...</code>)，或使用 <code>const</code> 断言 (<code>as const</code>)。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><ul><li>TypeScript 会结合上下文 (context) 信息进行类型推断。</li><li>如果对变量进行分解会导致类型错误，可以考虑添加类型声明。</li><li>如果变量确实是常量，可以使用 <code>const</code> 断言 ( <code>as const</code>)。但要注意这可能导致在使用才抛出错误，而不是在定义时就发现错误。</li></ul>',38);var k=n(u,[["render",function(n,t,e,o,l,u){const k=s("PubDate");return c(),a("div",null,[i,p(k,{date:"2021/03/08"}),r])}]]);export{l as __pageData,k as default};
