import{_ as n,c as s,o as a,d as e,e as t}from"./app.99a69550.js";const o='{"title":"Effective TypeScript","description":"","frontmatter":{},"headers":[{"level":2,"title":"把类型看作值的集合","slug":"把类型看作值的集合"},{"level":3,"title":"总结","slug":"总结"},{"level":2,"title":"多余属性检查(Excess property checking)","slug":"多余属性检查-excess-property-checking"},{"level":3,"title":"总结","slug":"总结-1"}],"relativePath":"articles/effective-ts.md","lastUpdated":1640183262459}',l={},c=[e("h1",{id:"effective-typescript",tabindex:"-1"},[t("Effective TypeScript "),e("a",{class:"header-anchor",href:"#effective-typescript","aria-hidden":"true"},"#")],-1),e("h2",{id:"把类型看作值的集合",tabindex:"-1"},[t("把类型看作值的集合 "),e("a",{class:"header-anchor",href:"#把类型看作值的集合","aria-hidden":"true"},"#")],-1),e("p",null,"把 TypeScript 中的类型看作一组可能的值的集合，这有助于你更好的理解 TypeScript 中的类型和类型操作。",-1),e("p",null,[t("例如，你可以把 "),e("code",null,"number"),t(" 类型看成是所有数值的集合。"),e("code",null,"42"),t(" 和 "),e("code",null,"-37"),t(" 都在其中，但是 "),e("code",null,"'hello'"),t(" 不在其中。根据是否设置 "),e("code",null,"strictNullChecks"),t("，"),e("code",null,"null"),t(" 和 "),e("code",null,"undefined"),t(" 可能是也可能不是这个集合的一部分：")],-1),e("div",{class:"language-ts"},[e("pre",null,[e("code",null,[e("span",{class:"token keyword"},"let"),t(" num"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token builtin"},"number"),t(),e("span",{class:"token operator"},"="),t(),e("span",{class:"token number"},"42"),t(),e("span",{class:"token comment"},"// ok"),t("\nnum "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token operator"},"-"),e("span",{class:"token number"},"37"),t(),e("span",{class:"token comment"},"// ok"),t("\nnum "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token string"},"'hello'"),t(),e("span",{class:"token comment"},"// ~ Type string is not assignable to type number"),t("\n")])])],-1),e("p",null,[t("最小的集合是空集，它对应于 TypeScript 中的 "),e("code",null,"never"),t(" 类型。因为空集不包含任何值，所以任何值都不能赋值给一个具有 "),e("code",null,"never"),t(" 类型的变量：")],-1),e("div",{class:"language-ts"},[e("pre",null,[e("code",null,[e("span",{class:"token keyword"},"const"),t(" x"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token builtin"},"never"),t(),e("span",{class:"token operator"},"="),t(),e("span",{class:"token number"},"12"),t(),e("span",{class:"token comment"},"// ~ Type '12' is not assignable to type 'never'"),t("\n")])])],-1),e("p",null,"其次最小的集合就是只包含一个值的集合，这对应于 TypeScript 中的字面类型(literal type），例如：",-1),e("div",{class:"language-js"},[e("pre",null,[e("code",null,[t("type "),e("span",{class:"token constant"},"A"),t(),e("span",{class:"token operator"},"="),t(),e("span",{class:"token string"},"'A'"),t("\ntype "),e("span",{class:"token constant"},"B"),t(),e("span",{class:"token operator"},"="),t(),e("span",{class:"token string"},"'B'"),t("\ntype Three "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token number"},"3"),t("\n")])])],-1),e("p",null,[t("可以将多个集合求并集生成一个新的集合，这对应于 TypeScript 中的联合类型，类型操作 "),e("code",null,"|"),t(" 可以理解为集合求并集操作：")],-1),e("div",{class:"language-ts"},[e("pre",null,[e("code",null,[e("span",{class:"token keyword"},"type"),t(),e("span",{class:"token class-name"},[e("span",{class:"token constant"},"AB")]),t(),e("span",{class:"token operator"},"="),t(),e("span",{class:"token string"},"'A'"),t(),e("span",{class:"token operator"},"|"),t(),e("span",{class:"token string"},"'B'"),t("\n"),e("span",{class:"token keyword"},"type"),t(),e("span",{class:"token class-name"},[e("span",{class:"token constant"},"AB3")]),t(),e("span",{class:"token operator"},"="),t(),e("span",{class:"token string"},"'A'"),t(),e("span",{class:"token operator"},"|"),t(),e("span",{class:"token string"},"'B'"),t(),e("span",{class:"token operator"},"|"),t(),e("span",{class:"token number"},"3"),t("\n")])])],-1),e("p",null,"类型 B 能赋给（assignable to）类型 A，当且仅当类型 B 代表的集合是类型 A 代表的集合的子集（subset），实际上，这正是 TypeScript 的类型检查的本质：",-1),e("div",{class:"language-ts"},[e("pre",null,[e("code",null,[e("span",{class:"token keyword"},"const"),t(" ab"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token constant"},"AB"),t(),e("span",{class:"token operator"},"="),t(" Math"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"random"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token operator"},">"),t(),e("span",{class:"token number"},"0.5"),t(),e("span",{class:"token operator"},"?"),t(),e("span",{class:"token string"},"'A'"),t(),e("span",{class:"token operator"},":"),t(),e("span",{class:"token string"},"'B'"),t(),e("span",{class:"token comment"},'// OK, {"A", "B"} 是 {"A", "B"} 的子集'),t("\n"),e("span",{class:"token keyword"},"const"),t(" ab3"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token constant"},"AB3"),t(),e("span",{class:"token operator"},"="),t(" ab "),e("span",{class:"token comment"},'// OK, {"A", "B"} 是 {"A", "B", 3} 的子集'),t("\n\n"),e("span",{class:"token keyword"},"declare"),t(),e("span",{class:"token keyword"},"let"),t(" three"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token constant"},"AB3"),t("\n"),e("span",{class:"token keyword"},"const"),t(" back"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token constant"},"AB"),t(),e("span",{class:"token operator"},"="),t(" three "),e("span",{class:"token comment"},'// Error, {"A", "B", 3} 不是 {"A", "B"} 的子集'),t("\n")])])],-1),e("p",null,"上面这些例子都很容易理解，因为这些类型代表的集合都是有限集，但是在实际场景中我们用到的类型很多是无限集，要理解这些类型和类型操作，就不那么容易。例如：",-1),e("div",{class:"language-ts"},[e("pre",null,[e("code",null,[e("span",{class:"token keyword"},"interface"),t(),e("span",{class:"token class-name"},"Identified"),t(),e("span",{class:"token punctuation"},"{"),t("\n  id"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token builtin"},"string"),t("\n"),e("span",{class:"token punctuation"},"}"),t("\n")])])],-1),e("p",null,[t("这个 interface 定义的集合就是一个无限集，它描述的是集合里的每个元素的形状，即必须包含一个 "),e("code",null,"id"),t(" 属性，且这个属性的值的类型必须是 "),e("code",null,"string"),t(" 类型的子集。也就是说，只要一个对象满足这一点，它就属于这个集合，即使它还包含额外的属性。")],-1),e("p",null,"理解了这一点可以帮助你更好的理解在这些类型上的类型操作：",-1),e("div",{class:"language-ts"},[e("pre",null,[e("code",null,[e("span",{class:"token keyword"},"interface"),t(),e("span",{class:"token class-name"},"Person"),t(),e("span",{class:"token punctuation"},"{"),t("\n  name"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token builtin"},"string"),t("\n"),e("span",{class:"token punctuation"},"}"),t("\n"),e("span",{class:"token keyword"},"interface"),t(),e("span",{class:"token class-name"},"Lifespan"),t(),e("span",{class:"token punctuation"},"{"),t("\n  birth"),e("span",{class:"token operator"},":"),t(" Date\n  death"),e("span",{class:"token operator"},"?"),e("span",{class:"token operator"},":"),t(" Date\n"),e("span",{class:"token punctuation"},"}"),t("\n"),e("span",{class:"token keyword"},"type"),t(),e("span",{class:"token class-name"},"PersonSpan"),t(),e("span",{class:"token operator"},"="),t(" Person "),e("span",{class:"token operator"},"&"),t(" Lifespan\n")])])],-1),e("p",null,[e("code",null,"&"),t(" 操作符用来计算两个类型的交集，那么哪些值是属于 "),e("code",null,"PersonSpan"),t(" 类型呢？咋一看，"),e("code",null,"Person"),t(" 和 "),e("code",null,"Lifespan"),t(" 没有相同的属性，所以它们的交集应该是空集。是这样吗？")],-1),e("p",null,[t("答案是否定的，首先，我们要弄清楚类型操作是作用在"),e("strong",null,"值的集合"),t("上，而不是类型定义的属性上，其次，一个包含额外属性（类型定义里声明的属性之外的属性）的值同样属于这个类型的集合。所以在上面的例子中，如果一个值同时包含 "),e("code",null,"Person"),t(" 和 "),e("code",null,"Lifespan"),t(" 的属性，那么它就属于 "),e("code",null,"PersonSpan"),t(" 类型：")],-1),e("div",{class:"language-ts"},[e("pre",null,[e("code",null,[e("span",{class:"token keyword"},"const"),t(" ps"),e("span",{class:"token operator"},":"),t(" PersonSpan "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token punctuation"},"{"),t("\n  name"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token string"},"'Alan Turing'"),e("span",{class:"token punctuation"},","),t("\n  birth"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token keyword"},"new"),t(),e("span",{class:"token class-name"},"Date"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},"'1912/06/23'"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},","),t("\n  death"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token keyword"},"new"),t(),e("span",{class:"token class-name"},"Date"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},"'1954/06/07'"),e("span",{class:"token punctuation"},")"),t("\n"),e("span",{class:"token punctuation"},"}"),t(),e("span",{class:"token comment"},"// Ok"),t("\n")])])],-1),e("p",null,"一般的规则是，多个 interface 的交叉类型（intersection type）中的值所包含的属性，是这每个组成的 interface 中的属性的联合（union）。可以用下面的公式来表达：",-1),e("div",{class:"language-ts"},[e("pre",null,[e("code",null,[e("span",{class:"token keyword"},"keyof"),t(),e("span",{class:"token punctuation"},"("),e("span",{class:"token constant"},"A"),t(),e("span",{class:"token operator"},"&"),t(),e("span",{class:"token constant"},"B"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token operator"},"="),t(),e("span",{class:"token punctuation"},"("),e("span",{class:"token keyword"},"keyof"),t(),e("span",{class:"token constant"},"A"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token operator"},"|"),t(),e("span",{class:"token punctuation"},"("),e("span",{class:"token keyword"},"keyof"),t(),e("span",{class:"token constant"},"B"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token comment"},"// (1)"),t("\n")])])],-1),e("p",null,"这很容易理解，也是符合直觉的。但是对于多个 interface 的联合类型（union type）来说，就有点绕了：",-1),e("div",{class:"language-ts"},[e("pre",null,[e("code",null,[e("span",{class:"token keyword"},"type"),t(),e("span",{class:"token class-name"},[e("span",{class:"token constant"},"K")]),t(),e("span",{class:"token operator"},"="),t(),e("span",{class:"token keyword"},"keyof"),t(),e("span",{class:"token punctuation"},"("),t("Person "),e("span",{class:"token operator"},"|"),t(" Lifespan"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token comment"},"// type K = never"),t("\n")])])],-1),e("p",null,[t("为什么是 "),e("code",null,"never"),t("？前面我们说过联合操作 "),e("code",null,"|"),t(" 相当于求并集，"),e("code",null,"Person | Lifespan"),t(" 所代表的集合由所有属于 "),e("code",null,"Person"),t(" 的值和所有属于 "),e("code",null,"Lifespan"),t(" 值组成，例如：")],-1),e("div",{class:"language-ts"},[e("pre",null,[e("code",null,[e("span",{class:"token keyword"},"const"),t(" p1 "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token punctuation"},"{"),t(" name"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token string"},"'Rose'"),t(),e("span",{class:"token punctuation"},"}"),t("\n"),e("span",{class:"token keyword"},"const"),t(" p2 "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token punctuation"},"{"),t(" name"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token string"},"'Monica'"),e("span",{class:"token punctuation"},","),t(" age"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token number"},"23"),t(),e("span",{class:"token punctuation"},"}"),t("\n"),e("span",{class:"token keyword"},"const"),t(" l1 "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token punctuation"},"{"),t("\n birth"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token keyword"},"new"),t(),e("span",{class:"token class-name"},"Date"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},"'1932/06/23'"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},","),t("\n death"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token keyword"},"new"),t(),e("span",{class:"token class-name"},"Date"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},"'1992/03/21'"),e("span",{class:"token punctuation"},")"),t("\n"),e("span",{class:"token punctuation"},"}"),t("\n"),e("span",{class:"token keyword"},"const"),t(" l2 "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token punctuation"},"{"),t("\n birth"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token keyword"},"new"),t(),e("span",{class:"token class-name"},"Date"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},"'1912/06/23'"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},","),t("\n death"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token keyword"},"new"),t(),e("span",{class:"token class-name"},"Date"),e("span",{class:"token punctuation"},"("),e("span",{class:"token string"},"'1952/03/21'"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},","),t("\n gender"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token string"},"'male'"),t("\n"),e("span",{class:"token punctuation"},"}"),t("\n\n"),e("span",{class:"token keyword"},"let"),t(" p"),e("span",{class:"token operator"},":"),t(" Person "),e("span",{class:"token operator"},"|"),t(" Lifespan "),e("span",{class:"token operator"},"="),t(" p1 "),e("span",{class:"token comment"},"// Ok"),t("\np "),e("span",{class:"token operator"},"="),t(" p2 "),e("span",{class:"token comment"},"// Ok"),t("\np "),e("span",{class:"token operator"},"="),t(" l1 "),e("span",{class:"token comment"},"// Ok"),t("\np "),e("span",{class:"token operator"},"="),t(" l2 "),e("span",{class:"token comment"},"// Ok"),t("\n")])])],-1),e("p",null,[t("可以看到 "),e("code",null,"p1"),t("，"),e("code",null,"p2"),t("，"),e("code",null,"l1"),t("，"),e("code",null,"l2"),t(" 都属于 "),e("code",null,"Person | Lifespan"),t(" 类型，但是由于 "),e("code",null,"Person"),t(" 和 "),e("code",null,"Lifespan"),t(" 的接口定义中所描述的属性没有重叠的部分，所以 TypeScript 无法找到某一个属性是 "),e("code",null,"Person | Lifespan"),t(" 这个集合中的每一个值都包含的，例如上面的 "),e("code",null,"p1"),t("，"),e("code",null,"p2"),t(" 和 "),e("code",null,"l1"),t("，"),e("code",null,"l2"),t(" 之间没有共同的属性，但是他们都属于 "),e("code",null,"Person | Lifespan"),t("，所以 TypeScript 推断出 "),e("code",null,"keyof (Person | Lifespan)"),t(" 是空集，即 "),e("code",null,"never"),t("。")],-1),e("p",null,"更通用的规则，也可以用下面的公式来表达：",-1),e("div",{class:"language-ts"},[e("pre",null,[e("code",null,[e("span",{class:"token keyword"},"keyof"),t(),e("span",{class:"token punctuation"},"("),e("span",{class:"token constant"},"A"),t(),e("span",{class:"token operator"},"|"),t(),e("span",{class:"token constant"},"B"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token operator"},"="),t(),e("span",{class:"token punctuation"},"("),e("span",{class:"token keyword"},"keyof"),t(),e("span",{class:"token constant"},"A"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token operator"},"&"),t(),e("span",{class:"token punctuation"},"("),e("span",{class:"token keyword"},"keyof"),t(),e("span",{class:"token constant"},"B"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token comment"},"// (2)"),t("\n")])])],-1),e("p",null,"如果你能对 (1)，(2) 这两个公式建立直觉，那么你就朝着深入理解 TypeScript 的类型系统前进了一大步。",-1),e("p",null,[t("另一个表达 "),e("code",null,"PersonSpan"),t(" 类型的方法是使用 "),e("code",null,"extends"),t("：")],-1),e("div",{class:"language-ts"},[e("pre",null,[e("code",null,[e("span",{class:"token keyword"},"interface"),t(),e("span",{class:"token class-name"},"Person"),t(),e("span",{class:"token punctuation"},"{"),t("\n  name"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token builtin"},"string"),t("\n"),e("span",{class:"token punctuation"},"}"),t("\n"),e("span",{class:"token keyword"},"interface"),t(),e("span",{class:"token class-name"},"PersonSpan"),t(),e("span",{class:"token keyword"},"extends"),t(),e("span",{class:"token class-name"},"Person"),t(),e("span",{class:"token punctuation"},"{"),t("\n  birth"),e("span",{class:"token operator"},":"),t(" Date\n  death"),e("span",{class:"token operator"},"?"),e("span",{class:"token operator"},":"),t(" Date\n"),e("span",{class:"token punctuation"},"}"),t("\n")])])],-1),e("p",null,[t("如果把类型看作值的集合，那这里的 "),e("code",null,"extends"),t(" 该如何理解？很简单，"),e("code",null,"A extends B"),t("，可以直接理解为 "),e("code",null,"A"),t(" 是 "),e("code",null,"B"),t(" 的子集（subset）。"),e("code",null,"PersonSpan"),t(" 中的值必须包含 "),e("code",null,"name"),t(" 属性且它的值是个 "),e("code",null,"string"),t("，同时也必须包含 "),e("code",null,"birth"),t(" 属性。所以 "),e("code",null,"PersonSpan"),t(" 是一个符合要求的子集。你可能还听过子类型（subtype）的说法，它和这里子集（subset）表达的意思相同。看下面的例子：")],-1),e("div",{class:"language-ts"},[e("pre",null,[e("code",null,[e("span",{class:"token keyword"},"interface"),t(),e("span",{class:"token class-name"},"Vector1D"),t(),e("span",{class:"token punctuation"},"{"),t(" x"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token builtin"},"number"),t(),e("span",{class:"token punctuation"},"}"),t("\n"),e("span",{class:"token keyword"},"interface"),t(),e("span",{class:"token class-name"},"Vector2D"),t(),e("span",{class:"token keyword"},"extends"),t(),e("span",{class:"token class-name"},"Vector1D"),t(),e("span",{class:"token punctuation"},"{"),t(" y"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token builtin"},"number"),t(),e("span",{class:"token punctuation"},"}"),t("\n"),e("span",{class:"token keyword"},"interface"),t(),e("span",{class:"token class-name"},"Vector3D"),t(),e("span",{class:"token keyword"},"extends"),t(),e("span",{class:"token class-name"},"Vector2D"),t(),e("span",{class:"token punctuation"},"{"),t(" z"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token builtin"},"number"),t(),e("span",{class:"token punctuation"},"}"),t("\n")])])],-1),e("p",null,[t("这里你可以说 "),e("code",null,"Vector3D"),t(" 是 "),e("code",null,"Vector2D"),t(" 的子类型，"),e("code",null,"Vector2D"),t(" 又是 "),e("code",null,"Vector1D"),t(" 的子类型，从集合的角度，可以用韦恩图形象的描述它们之间的关系： "),e("img",{src:"/yangss/assets/ts-subtype.875029f9.svg",class:"mx-auto mt-20px"})],-1),e("p",null,[t("我们上面都是针对对象类型使用集合的概念进行解释，如果是字面类型（literal type）以及它们的联合类型，采用集合的解释会更加直观。"),e("code",null,"extends"),t(" 也可做为泛型的约束出现，在这种场景下，它也是子集（subset）的意思：")],-1),e("div",{class:"language-ts"},[e("pre",null,[e("code",null,[e("span",{class:"token keyword"},"function"),t(),e("span",{class:"token generic-function"},[e("span",{class:"token function"},"getKey"),e("span",{class:"token generic class-name"},[e("span",{class:"token operator"},"<"),e("span",{class:"token constant"},"K"),t(),e("span",{class:"token keyword"},"extends"),t(),e("span",{class:"token builtin"},"string"),e("span",{class:"token operator"},">")])]),e("span",{class:"token punctuation"},"("),t("val"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token builtin"},"any"),e("span",{class:"token punctuation"},","),t(" key"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token constant"},"K"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token punctuation"},"{"),t("\n  "),e("span",{class:"token comment"},"// ..."),t("\n"),e("span",{class:"token punctuation"},"}"),t("\n")])])],-1),e("p",null,[t("这里的 "),e("code",null,"extends string"),t(" 是什么意思？如果你从对象继承的角度来思考，那就很难解释，而如果从集合的角度来考虑，就很清楚了："),e("code",null,"K"),t(" 代表的集合必须是 "),e("code",null,"string"),t(" 的子集。这包括字符串字面类型（string literal type）、字符串字面类型的联合类型（union of string literal types）和 "),e("code",null,"string"),t(" 本身。")],-1),e("div",{class:"language-ts"},[e("pre",null,[e("code",null,[e("span",{class:"token function"},"getKey"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},"{"),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},","),t(),e("span",{class:"token string"},"'x'"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token comment"},"// OK, 'x' extends string"),t("\n"),e("span",{class:"token function"},"getKey"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},"{"),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},","),t(" Math"),e("span",{class:"token punctuation"},"."),e("span",{class:"token function"},"random"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token operator"},"<"),t(),e("span",{class:"token number"},"0.5"),t(),e("span",{class:"token operator"},"?"),t(),e("span",{class:"token string"},"'a'"),t(),e("span",{class:"token operator"},":"),t(),e("span",{class:"token string"},"'b'"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token comment"},"// OK, 'a'|'b' extends string"),t("\n"),e("span",{class:"token function"},"getKey"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},"{"),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},","),t(" document"),e("span",{class:"token punctuation"},"."),t("title"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},";"),t(),e("span",{class:"token comment"},"// OK, string extends string"),t("\n"),e("span",{class:"token function"},"getKey"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},"{"),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},","),t(),e("span",{class:"token number"},"12"),e("span",{class:"token punctuation"},")"),t("\n "),e("span",{class:"token comment"},"// ~~ Type '12' is not assignable to parameter of type 'string'"),t("\n")])])],-1),e("p",null,"如果把类型看作值的集合，这意味着具有相同值集合的两个类型是相同的。实际上就是这样，除非两个类型在语义上是不同的，只是碰巧有相同的值集合，否则没有理由将同一个类型定义两次。",-1),e("p",null,"最后，值得注意的是，并非所有的值集都有对应的 TypeScript 类型。所有整数组成的集合就没有对应的 TypeScript 类型，所有只包含 x 和 y 属性的对象组成的集合，也找不到对应的 TypeScript 类型。",-1),e("p",null,"TypeScript 中的术语与集合论中的术语的有如下对应关系：",-1),e("table",null,[e("thead",null,[e("tr",null,[e("th",null,"TypeScript term"),e("th",null,"Set term")])]),e("tbody",null,[e("tr",null,[e("td",null,"never"),e("td",null,"∅ (empty set)")]),e("tr",null,[e("td",null,"Literal type"),e("td",null,"Single element set")]),e("tr",null,[e("td",null,"Value assignable to T"),e("td",null,"Value ∈ T (member of)")]),e("tr",null,[e("td",null,"T1 assignable to T2"),e("td",null,"T1 ⊆ T2 (subset of)")]),e("tr",null,[e("td",null,"T1 extends T2"),e("td",null,"T1 ⊆ T2 (subset of)")]),e("tr",null,[e("td",null,"T1 | T2"),e("td",null,"T1 ∪ T2 (union)")]),e("tr",null,[e("td",null,"T1 & T2"),e("td",null,"T1 ∩ T2 (intersection)")]),e("tr",null,[e("td",null,"unknown"),e("td",null,"Universal set")])])],-1),e("h3",{id:"总结",tabindex:"-1"},[t("总结 "),e("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#")],-1),e("ul",null,[e("li",null,"把类型看作是类型的集合，这些集合可以是有限集（boolean，literal types）或者是无限集（number，string）。"),e("li",null,"请记住，一个对象仍然可以属于一个类型，即使它有在类型声明中没有提到的额外属性。"),e("li",null,"理解类型操作是作用在类型代表的集合上的。"),e("li",null,"把 ”extends“，“assignable to”，“subtype of” 看作是 ”subset of“（子集）的同义词。")],-1),e("h2",{id:"多余属性检查-excess-property-checking",tabindex:"-1"},[t("多余属性检查(Excess property checking) "),e("a",{class:"header-anchor",href:"#多余属性检查-excess-property-checking","aria-hidden":"true"},"#")],-1),e("p",null,"当你把一个对象的字面量赋值给一个有声明类型的变量时，TypeScript 会确保它具有该类型的属性，而且没有任何未声明的的属性：",-1),e("div",{class:"language-ts"},[e("pre",null,[e("code",null,[e("span",{class:"token keyword"},"interface"),t(),e("span",{class:"token class-name"},"Room"),t(),e("span",{class:"token punctuation"},"{"),t("\n  numDoors"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token builtin"},"number"),t("\n  ceilingHeightFt"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token builtin"},"number"),t("\n"),e("span",{class:"token punctuation"},"}"),t("\n\n"),e("span",{class:"token keyword"},"const"),t(" r"),e("span",{class:"token operator"},":"),t(" Room "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token punctuation"},"{"),t("\n  numDoors"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token number"},"1"),e("span",{class:"token punctuation"},","),t("\n  ceilingHeightFt"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token number"},"10"),e("span",{class:"token punctuation"},","),t("\n  elephant"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token string"},"'present'"),t("\n"),e("span",{class:"token punctuation"},"}"),t(),e("span",{class:"token comment"},"// ~~~ Object literal may only specify known properties, and 'elephant' does not exist in type 'Room'"),t("\n")])])],-1),e("p",null,[t("但是通过引入一个中间变量，你还是可以把这个字面对象分配给 "),e("code",null,"Room"),t(" 类型：")],-1),e("div",{class:"language-ts"},[e("pre",null,[e("code",null,[e("span",{class:"token keyword"},"const"),t(" obj "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token punctuation"},"{"),t("\n  numDoors"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token number"},"1"),e("span",{class:"token punctuation"},","),t("\n  ceilingHeightFt"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token number"},"10"),e("span",{class:"token punctuation"},","),t("\n  elephant"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token string"},"'present'"),e("span",{class:"token punctuation"},","),t("\n"),e("span",{class:"token punctuation"},"}"),t("\n"),e("span",{class:"token keyword"},"const"),t(" r"),e("span",{class:"token operator"},":"),t(" Room "),e("span",{class:"token operator"},"="),t(" obj "),e("span",{class:"token comment"},"// Ok"),t("\n")])])],-1),e("p",null,[t("变量 "),e("code",null,"obj"),t(" 的类型被推断为 "),e("code",null,"{ numDoors: number; ceilingHeightFt: number; elephant: string }"),t("，而这个类型的值集是 "),e("code",null,"Room"),t(" 类型的一个子集，所以赋值能通过类型检查。")],-1),e("p",null,"那么这两个例子有什么不同？第一个例子中触发了一个叫做”多余属性检查”(excess property checking)的过程，它会帮你捕获结构化类型系统中很容易被漏掉的一类重要的错误。但是这个过程有它的局限性，把它和常规的可赋值检查(assignability checking)混为一谈会使我们更难建立对结构化类型的直觉。认识到多余属性检查(excess property checking)是一个独特的过程将有助于你建立一个更清晰的 TypeScript 类型系统的心智模型。",-1),e("p",null,"TypeScript 不仅试图标记那些会在运行时抛出异常的代码。它还试图找到那些不按你的意图执行的代码。下面是一个例子：",-1),e("div",{class:"language-ts"},[e("pre",null,[e("code",null,[e("span",{class:"token keyword"},"interface"),t(),e("span",{class:"token class-name"},"Options"),t(),e("span",{class:"token punctuation"},"{"),t("\n  title"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token builtin"},"string"),t("\n  darkMode"),e("span",{class:"token operator"},"?"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token builtin"},"boolean"),t("\n"),e("span",{class:"token punctuation"},"}"),t("\n"),e("span",{class:"token keyword"},"function"),t(),e("span",{class:"token function"},"createWindow"),e("span",{class:"token punctuation"},"("),t("options"),e("span",{class:"token operator"},":"),t(" Options"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token punctuation"},"{"),t("\n  "),e("span",{class:"token keyword"},"if"),t(),e("span",{class:"token punctuation"},"("),t("options"),e("span",{class:"token punctuation"},"."),t("darkMode"),e("span",{class:"token punctuation"},")"),t(),e("span",{class:"token punctuation"},"{"),t("\n    "),e("span",{class:"token function"},"setDarkMode"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},")"),t("\n  "),e("span",{class:"token punctuation"},"}"),t("\n "),e("span",{class:"token comment"},"// ..."),t("\n"),e("span",{class:"token punctuation"},"}"),t("\n\n"),e("span",{class:"token function"},"createWindow"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},"{"),t("\n  title"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token string"},"'Spider Solitaire'"),e("span",{class:"token punctuation"},","),t("\n  darkmode"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token boolean"},"true"),t("\n  "),e("span",{class:"token comment"},"// ~~~~~ Object literal may only specify known properties, but"),t("\n  "),e("span",{class:"token comment"},"//       'darkmode' does not exist in type 'Options'."),t("\n  "),e("span",{class:"token comment"},"//       Did you mean to write 'darkMode'?"),t("\n"),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},")"),t("\n")])])],-1),e("p",null,[t("这段代码在运行时阶段不会抛出任何错误。但它也不太可能是你的本意，原因正如错误提示指出的：应该是 "),e("code",null,"darkMode"),t("（大写的 M），而不是 "),e("code",null,"darkmode"),t("。")],-1),e("p",null,[t("一个纯结构化类型检查器无法发现这种错误，因为 "),e("code",null,"Options"),t(" 类型所表示的值集范围非常宽泛：它包括所有包含 "),e("code",null,"title"),t(" 属性（且是 "),e("code",null,"string"),t(" 类型）的对象，只要这个对象不包含非布尔值的 "),e("code",null,"darkMode"),t(" 属性：")],-1),e("div",{class:"language-ts"},[e("pre",null,[e("code",null,[e("span",{class:"token keyword"},"const"),t(" o1"),e("span",{class:"token operator"},":"),t(" Options "),e("span",{class:"token operator"},"="),t(" document "),e("span",{class:"token comment"},"// Ok"),t("\n"),e("span",{class:"token keyword"},"const"),t(" o2"),e("span",{class:"token operator"},":"),t(" Options "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token keyword"},"new"),t(),e("span",{class:"token class-name"},"HTMLAnchorElement"),t(),e("span",{class:"token comment"},"// Ok"),t("\n")])])],-1),e("p",null,[e("code",null,"document"),t(" 和 "),e("code",null,"HTMLAnchorElement"),t(" 的实例都有 "),e("code",null,"title"),t(" 属性，且都是字符串，所以这些赋值都可以成功。可见 "),e("code",null,"Options"),t(" 类型有多宽泛 !")],-1),e("p",null,[t("多余属性检查(excess property checking)试图在不破坏类型系统的基本结构性质的情况下控制这种情况。它通过禁止对象字面量的未知属性来做到这一点（有时被称为“严格的对象字面检查”）。"),e("code",null,"document"),t(" 和 "),e("code",null,"new HTMLAnchorElement"),t(" 都不是对象字面量，所以没有触发检查。但是 "),e("code",null,"{ title, darkmode }"),t(" 是对象字面量，它会触发这个检查。")],-1),e("div",{class:"language-ts"},[e("pre",null,[e("code",null,[e("span",{class:"token keyword"},"const"),t(" o"),e("span",{class:"token operator"},":"),t(" Options "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token punctuation"},"{"),t(" darkmode"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token boolean"},"true"),e("span",{class:"token punctuation"},","),t(" title"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token string"},"'Ski Free'"),t(),e("span",{class:"token punctuation"},"}"),t("\n "),e("span",{class:"token comment"},"// ~~~ 'darkmode' does not exist in type 'Options'..."),t("\n")])])],-1),e("p",null,"这也就解释了为什么使用一个不带类型声明的中间变量就可以消除错误提示：",-1),e("div",{class:"language-ts"},[e("pre",null,[e("code",null,[e("span",{class:"token keyword"},"const"),t(" intermediate "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token punctuation"},"{"),t(" darkmode"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token boolean"},"true"),e("span",{class:"token punctuation"},","),t(" title"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token string"},"'Ski Free'"),t(),e("span",{class:"token punctuation"},"}"),t("\n"),e("span",{class:"token keyword"},"const"),t(" o"),e("span",{class:"token operator"},":"),t(" Options "),e("span",{class:"token operator"},"="),t(" intermediate "),e("span",{class:"token comment"},"// Ok"),t("\n")])])],-1),e("p",null,"另外，如果你使用类型断言(type assertion)，也不会触发多余属性检查(excess property checking)：",-1),e("div",{class:"language-ts"},[e("pre",null,[e("code",null,[e("span",{class:"token keyword"},"const"),t(" o "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token punctuation"},"{"),t(" darkmode"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token boolean"},"true"),e("span",{class:"token punctuation"},","),t(" title"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token string"},"'Ski Free'"),t(),e("span",{class:"token punctuation"},"}"),t(),e("span",{class:"token keyword"},"as"),t(" Options "),e("span",{class:"token comment"},"// OK"),t("\n")])])],-1),e("p",null,"这也是要尽可能使用类型声明而不是类型断言的理由之一。",-1),e("p",null,"如果你不想要这种检查，你可以使用一个 index signature 来告诉 TypeScript 你可以接受额外的属性：",-1),e("div",{class:"language-ts"},[e("pre",null,[e("code",null,[e("span",{class:"token keyword"},"interface"),t(),e("span",{class:"token class-name"},"Options"),t(),e("span",{class:"token punctuation"},"{"),t("\n  darkMode"),e("span",{class:"token operator"},"?"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token builtin"},"boolean"),t("\n  "),e("span",{class:"token punctuation"},"["),t("otherOptions"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token builtin"},"string"),e("span",{class:"token punctuation"},"]"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token builtin"},"unknown"),t("\n"),e("span",{class:"token punctuation"},"}"),t("\n"),e("span",{class:"token keyword"},"const"),t(" o"),e("span",{class:"token operator"},":"),t(" Options "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token punctuation"},"{"),t(" darkmode"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token boolean"},"true"),t(),e("span",{class:"token punctuation"},"}"),t(),e("span",{class:"token comment"},"// OK"),t("\n")])])],-1),e("p",null,"在“弱”类型（weak type，只包含可选属性的类型）上也有一个类似的检查：",-1),e("div",{class:"language-ts"},[e("pre",null,[e("code",null,[e("span",{class:"token keyword"},"interface"),t(),e("span",{class:"token class-name"},"LineChartOptions"),t(),e("span",{class:"token punctuation"},"{"),t("\n  logscale"),e("span",{class:"token operator"},"?"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token builtin"},"boolean"),t("\n  invertedYAxis"),e("span",{class:"token operator"},"?"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token builtin"},"boolean"),t("\n  areaChart"),e("span",{class:"token operator"},"?"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token builtin"},"boolean"),t("\n"),e("span",{class:"token punctuation"},"}"),t("\n"),e("span",{class:"token keyword"},"const"),t(" opts "),e("span",{class:"token operator"},"="),t(),e("span",{class:"token punctuation"},"{"),t(" logScale"),e("span",{class:"token operator"},":"),t(),e("span",{class:"token boolean"},"true"),t(),e("span",{class:"token punctuation"},"}"),t("\n"),e("span",{class:"token keyword"},"const"),t(" o"),e("span",{class:"token operator"},":"),t(" LineChartOptions "),e("span",{class:"token operator"},"="),t(" opts\n"),e("span",{class:"token comment"},"// ~~~ Type '{ logScale: boolean; }' has no properties in common with type 'LineChartOptions'"),t("\n")])])],-1),e("p",null,[t("从结构的角度来看，"),e("code",null,"LineChartOptions"),t(" 类型应该包括几乎所有的对象。对于像这样的弱类型，TypeScript 添加了另一个检查，以确保值类型和声明类型至少有一个共同的属性。和多余属性检查(excess property checking)一样，这在捕捉错别字方面很有效，而且不是严格的结构性检查。但与多余属性检查不同，它发生在所有涉及弱类型的赋值过程中，使用中间变量并不能绕过这个检查。")],-1),e("p",null,[t("多余属性检查是一种有效的方法，可以在属性名称中捕捉到错别字和其他错误。它对像 "),e("code",null,"Options"),t(" 这样包含可选字段的类型特别有用。但它的范围也非常有限：它只适用于对象字面量。认识到这个限制，并区分多余属性检查和普通的类型检查，这将有助于你建立两者的心智模型。")],-1),e("h3",{id:"总结-1",tabindex:"-1"},[t("总结 "),e("a",{class:"header-anchor",href:"#总结-1","aria-hidden":"true"},"#")],-1),e("ul",null,[e("li",null,"当你把一个对象的字面量分配给一个变量或把它作为一个参数传递给一个函数时，它会经过多余属性检查(excess property checking)。"),e("li",null,"多余属性检查是发现错误的有效方法，但它与 TypeScript 类型检查器通常所做的结构可分配性(structural assignability)检查不同。将这些过程混为一谈会使你更难建立可分配性的心智模型"),e("li",null,"注意多余属性检查的局限性：引入一个中间变量将绕过这些检查")],-1)];var p=n(l,[["render",function(n,e,t,o,l,p){return a(),s("div",null,c)}]]);export{o as __pageData,p as default};
