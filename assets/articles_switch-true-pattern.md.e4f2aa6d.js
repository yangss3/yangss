import{_ as s,r as n,c as a,b as t,d as e,e as p,a as o,o as c}from"./app.b2baf6b4.js";const r='{"title":"使用 switch(ture) 模式","description":"","frontmatter":{},"headers":[{"level":2,"title":"Fundamental principle","slug":"fundamental-principle"},{"level":2,"title":"Why is this useful","slug":"why-is-this-useful"},{"level":2,"title":"Summary","slug":"summary"}],"relativePath":"articles/switch-true-pattern.md","lastUpdated":1632842860093}',l={},u=e("h1",{id:"使用-switch-ture-模式",tabindex:"-1"},[p("使用 switch(ture) 模式 "),e("a",{class:"header-anchor",href:"#使用-switch-ture-模式","aria-hidden":"true"},"#")],-1),k=o('<blockquote><p><a href="https://seanbarry.dev/posts/switch-true-pattern" target="_blank" rel="noopener noreferrer">原文地址</a></p></blockquote><h2 id="fundamental-principle" tabindex="-1">Fundamental principle <a class="header-anchor" href="#fundamental-principle" aria-hidden="true">#</a></h2><p><code>switch(true)</code> 模式的基本原则是，<code>switch</code> 语句不仅匹配值还可以匹配表达式。case 中的表达式将在匹配前被计算，如果表达式的结果为 <code>true</code>，它将被匹配：</p><div class="language-js"><pre><code><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">===</span> <span class="token number">2</span><span class="token operator">:</span>\n    <span class="token comment">// case 表达式的结果为 true, 这里的会被执行</span>\n    <span class="token keyword">break</span>\n  <span class="token keyword">default</span><span class="token operator">:</span>\n    <span class="token comment">// 这里不会被执行</span>\n    <span class="token keyword">break</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="why-is-this-useful" tabindex="-1">Why is this useful <a class="header-anchor" href="#why-is-this-useful" aria-hidden="true">#</a></h2><p>这种模式可以在很多场景下使用，通常用来取代复杂的 <code>if/else</code> 语句。一个常见场景是如果你正在校验数据，并且有一组标准会导致校验失败</p><div class="language-js"><pre><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n  firstName<span class="token operator">:</span> <span class="token string">&quot;Nicholas&quot;</span><span class="token punctuation">,</span>\n  lastName<span class="token operator">:</span> <span class="token string">&quot;Yang&quot;</span><span class="token punctuation">,</span>\n  email<span class="token operator">:</span> <span class="token string">&quot;yss_2016@outlook.com&quot;</span><span class="token punctuation">,</span>\n  number<span class="token operator">:</span> <span class="token string">&quot;00447123456789&quot;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;User must be defined.&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;User&#39;s first name must be defined&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> user<span class="token punctuation">.</span>firstName <span class="token operator">!==</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;User&#39;s first name must be a string&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// ...更多校验语句</span>\n\n<span class="token keyword">return</span> user\n</code></pre></div><p>这可以用 <code>switch(true)</code> 来重写，就像这样:</p><div class="language-js"><pre><code><span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>\n  firstName<span class="token operator">:</span> <span class="token string">&quot;Nicholas&quot;</span><span class="token punctuation">,</span>\n  lastName<span class="token operator">:</span> <span class="token string">&quot;Yang&quot;</span><span class="token punctuation">,</span>\n  email<span class="token operator">:</span> <span class="token string">&quot;yss_2016@outlook.com&quot;</span><span class="token punctuation">,</span>\n  number<span class="token operator">:</span> <span class="token string">&quot;00447123456789&quot;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token operator">!</span>user<span class="token operator">:</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;User must be defined.&quot;</span><span class="token punctuation">)</span>\n  <span class="token keyword">case</span> <span class="token operator">!</span>user<span class="token punctuation">.</span>firstName<span class="token operator">:</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;User&#39;s first name must be defined&quot;</span><span class="token punctuation">)</span>\n  <span class="token keyword">case</span> <span class="token keyword">typeof</span> user<span class="token punctuation">.</span>firstName <span class="token operator">!==</span> <span class="token string">&quot;string&quot;</span><span class="token operator">:</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;User&#39;s first name must be a string&quot;</span><span class="token punctuation">)</span>\n  <span class="token comment">// ...更多校验</span>\n  <span class="token keyword">default</span><span class="token operator">:</span>\n    <span class="token keyword">return</span> user\n<span class="token punctuation">}</span>\n</code></pre></div><p>在写 <code>if/else</code> 和 <code>switch(true)</code> 时，都可以抽象出验证标准，以提高可读性：</p><div class="language-js"><pre><code><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token operator">!</span><span class="token function">isDefined</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token operator">:</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;User must be defined.&quot;</span><span class="token punctuation">)</span>\n  <span class="token keyword">case</span> <span class="token operator">!</span><span class="token function">isString</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span><span class="token operator">:</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;User&#39;s first name must be a string&quot;</span><span class="token punctuation">)</span>\n  <span class="token keyword">case</span> <span class="token operator">!</span><span class="token function">isValidEmail</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>email<span class="token punctuation">)</span><span class="token operator">:</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;User&#39;s email address must be a valid email address&quot;</span><span class="token punctuation">)</span>\n  <span class="token keyword">case</span> <span class="token operator">!</span><span class="token function">isValidPhoneNumber</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>number<span class="token punctuation">)</span><span class="token operator">:</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;User&#39;s phone number must be a valid phone number&quot;</span><span class="token punctuation">)</span>\n  <span class="token comment">// ...更多校验</span>\n  <span class="token keyword">default</span><span class="token operator">:</span>\n    <span class="token keyword">return</span> user\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-hidden="true">#</a></h2><p>在我看来，这种模式在检查多个条件时比使用大量的 <code>if/else</code> 块提供了更清晰的可读性。我相信这将会是一个很有争议的问题，但是了解这些模式总是很有用的，在适当的时候就可以使用它们。</p>',13);var i=s(l,[["render",function(s,e,p,o,r,l){const i=n("PubDate");return c(),a("div",null,[u,t(i,{date:"2021/09/22"}),k])}]]);export{r as __pageData,i as default};
