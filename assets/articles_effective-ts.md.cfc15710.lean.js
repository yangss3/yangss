import{_ as n,c as s,o as a,d as t,e}from"./app.fe600bf7.js";const o='{"title":"深入理解 TypeScript 的类型系统","description":"","frontmatter":{},"headers":[{"level":2,"title":"把类型看作值的集合","slug":"把类型看作值的集合"},{"level":3,"title":"总结","slug":"总结"},{"level":2,"title":"多余属性检查(Excess property checking)","slug":"多余属性检查-excess-property-checking"},{"level":3,"title":"总结","slug":"总结-1"}],"relativePath":"articles/effective-ts.md","lastUpdated":1640183480160}',l={},p=[t("h1",{id:"深入理解-typescript-的类型系统",tabindex:"-1"},[e("深入理解 TypeScript 的类型系统 "),t("a",{class:"header-anchor",href:"#深入理解-typescript-的类型系统","aria-hidden":"true"},"#")],-1),t("h2",{id:"把类型看作值的集合",tabindex:"-1"},[e("把类型看作值的集合 "),t("a",{class:"header-anchor",href:"#把类型看作值的集合","aria-hidden":"true"},"#")],-1),t("p",null,"把 TypeScript 中的类型看作一组可能的值的集合，这有助于你更好的理解 TypeScript 中的类型和类型操作。",-1),t("p",null,[e("例如，你可以把 "),t("code",null,"number"),e(" 类型看成是所有数值的集合。"),t("code",null,"42"),e(" 和 "),t("code",null,"-37"),e(" 都在其中，但是 "),t("code",null,"'hello'"),e(" 不在其中。根据是否设置 "),t("code",null,"strictNullChecks"),e("，"),t("code",null,"null"),e(" 和 "),t("code",null,"undefined"),e(" 可能是也可能不是这个集合的一部分：")],-1),t("div",{class:"language-ts"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"let"),e(" num"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token builtin"},"number"),e(),t("span",{class:"token operator"},"="),e(),t("span",{class:"token number"},"42"),e(),t("span",{class:"token comment"},"// ok"),e("\nnum "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token operator"},"-"),t("span",{class:"token number"},"37"),e(),t("span",{class:"token comment"},"// ok"),e("\nnum "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token string"},"'hello'"),e(),t("span",{class:"token comment"},"// ~ Type string is not assignable to type number"),e("\n")])])],-1),t("p",null,[e("最小的集合是空集，它对应于 TypeScript 中的 "),t("code",null,"never"),e(" 类型。因为空集不包含任何值，所以任何值都不能赋值给一个具有 "),t("code",null,"never"),e(" 类型的变量：")],-1),t("div",{class:"language-ts"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"const"),e(" x"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token builtin"},"never"),e(),t("span",{class:"token operator"},"="),e(),t("span",{class:"token number"},"12"),e(),t("span",{class:"token comment"},"// ~ Type '12' is not assignable to type 'never'"),e("\n")])])],-1),t("p",null,"其次最小的集合就是只包含一个值的集合，这对应于 TypeScript 中的字面类型(literal type），例如：",-1),t("div",{class:"language-js"},[t("pre",null,[t("code",null,[e("type "),t("span",{class:"token constant"},"A"),e(),t("span",{class:"token operator"},"="),e(),t("span",{class:"token string"},"'A'"),e("\ntype "),t("span",{class:"token constant"},"B"),e(),t("span",{class:"token operator"},"="),e(),t("span",{class:"token string"},"'B'"),e("\ntype Three "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token number"},"3"),e("\n")])])],-1),t("p",null,[e("可以将多个集合求并集生成一个新的集合，这对应于 TypeScript 中的联合类型，类型操作 "),t("code",null,"|"),e(" 可以理解为集合求并集操作：")],-1),t("div",{class:"language-ts"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"type"),e(),t("span",{class:"token class-name"},[t("span",{class:"token constant"},"AB")]),e(),t("span",{class:"token operator"},"="),e(),t("span",{class:"token string"},"'A'"),e(),t("span",{class:"token operator"},"|"),e(),t("span",{class:"token string"},"'B'"),e("\n"),t("span",{class:"token keyword"},"type"),e(),t("span",{class:"token class-name"},[t("span",{class:"token constant"},"AB3")]),e(),t("span",{class:"token operator"},"="),e(),t("span",{class:"token string"},"'A'"),e(),t("span",{class:"token operator"},"|"),e(),t("span",{class:"token string"},"'B'"),e(),t("span",{class:"token operator"},"|"),e(),t("span",{class:"token number"},"3"),e("\n")])])],-1),t("p",null,"类型 B 能赋给（assignable to）类型 A，当且仅当类型 B 代表的集合是类型 A 代表的集合的子集（subset），实际上，这正是 TypeScript 的类型检查的本质：",-1),t("div",{class:"language-ts"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"const"),e(" ab"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token constant"},"AB"),e(),t("span",{class:"token operator"},"="),e(" Math"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"random"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token operator"},">"),e(),t("span",{class:"token number"},"0.5"),e(),t("span",{class:"token operator"},"?"),e(),t("span",{class:"token string"},"'A'"),e(),t("span",{class:"token operator"},":"),e(),t("span",{class:"token string"},"'B'"),e(),t("span",{class:"token comment"},'// OK, {"A", "B"} 是 {"A", "B"} 的子集'),e("\n"),t("span",{class:"token keyword"},"const"),e(" ab3"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token constant"},"AB3"),e(),t("span",{class:"token operator"},"="),e(" ab "),t("span",{class:"token comment"},'// OK, {"A", "B"} 是 {"A", "B", 3} 的子集'),e("\n\n"),t("span",{class:"token keyword"},"declare"),e(),t("span",{class:"token keyword"},"let"),e(" three"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token constant"},"AB3"),e("\n"),t("span",{class:"token keyword"},"const"),e(" back"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token constant"},"AB"),e(),t("span",{class:"token operator"},"="),e(" three "),t("span",{class:"token comment"},'// Error, {"A", "B", 3} 不是 {"A", "B"} 的子集'),e("\n")])])],-1),t("p",null,"上面这些例子都很容易理解，因为这些类型代表的集合都是有限集，但是在实际场景中我们用到的类型很多是无限集，要理解这些类型和类型操作，就不那么容易。例如：",-1),t("div",{class:"language-ts"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"interface"),e(),t("span",{class:"token class-name"},"Identified"),e(),t("span",{class:"token punctuation"},"{"),e("\n  id"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token builtin"},"string"),e("\n"),t("span",{class:"token punctuation"},"}"),e("\n")])])],-1),t("p",null,[e("这个 interface 定义的集合就是一个无限集，它描述的是集合里的每个元素的形状，即必须包含一个 "),t("code",null,"id"),e(" 属性，且这个属性的值的类型必须是 "),t("code",null,"string"),e(" 类型的子集。也就是说，只要一个对象满足这一点，它就属于这个集合，即使它还包含额外的属性。")],-1),t("p",null,"理解了这一点可以帮助你更好的理解在这些类型上的类型操作：",-1),t("div",{class:"language-ts"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"interface"),e(),t("span",{class:"token class-name"},"Person"),e(),t("span",{class:"token punctuation"},"{"),e("\n  name"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token builtin"},"string"),e("\n"),t("span",{class:"token punctuation"},"}"),e("\n"),t("span",{class:"token keyword"},"interface"),e(),t("span",{class:"token class-name"},"Lifespan"),e(),t("span",{class:"token punctuation"},"{"),e("\n  birth"),t("span",{class:"token operator"},":"),e(" Date\n  death"),t("span",{class:"token operator"},"?"),t("span",{class:"token operator"},":"),e(" Date\n"),t("span",{class:"token punctuation"},"}"),e("\n"),t("span",{class:"token keyword"},"type"),e(),t("span",{class:"token class-name"},"PersonSpan"),e(),t("span",{class:"token operator"},"="),e(" Person "),t("span",{class:"token operator"},"&"),e(" Lifespan\n")])])],-1),t("p",null,[t("code",null,"&"),e(" 操作符用来计算两个类型的交集，那么哪些值是属于 "),t("code",null,"PersonSpan"),e(" 类型呢？咋一看，"),t("code",null,"Person"),e(" 和 "),t("code",null,"Lifespan"),e(" 没有相同的属性，所以它们的交集应该是空集。是这样吗？")],-1),t("p",null,[e("答案是否定的，首先，我们要弄清楚类型操作是作用在"),t("strong",null,"值的集合"),e("上，而不是类型定义的属性上，其次，一个包含额外属性（类型定义里声明的属性之外的属性）的值同样属于这个类型的集合。所以在上面的例子中，如果一个值同时包含 "),t("code",null,"Person"),e(" 和 "),t("code",null,"Lifespan"),e(" 的属性，那么它就属于 "),t("code",null,"PersonSpan"),e(" 类型：")],-1),t("div",{class:"language-ts"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"const"),e(" ps"),t("span",{class:"token operator"},":"),e(" PersonSpan "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"{"),e("\n  name"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token string"},"'Alan Turing'"),t("span",{class:"token punctuation"},","),e("\n  birth"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token keyword"},"new"),e(),t("span",{class:"token class-name"},"Date"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'1912/06/23'"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},","),e("\n  death"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token keyword"},"new"),e(),t("span",{class:"token class-name"},"Date"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'1954/06/07'"),t("span",{class:"token punctuation"},")"),e("\n"),t("span",{class:"token punctuation"},"}"),e(),t("span",{class:"token comment"},"// Ok"),e("\n")])])],-1),t("p",null,"一般的规则是，多个 interface 的交叉类型（intersection type）中的值所包含的属性，是这每个组成的 interface 中的属性的联合（union）。可以用下面的公式来表达：",-1),t("div",{class:"language-ts"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"keyof"),e(),t("span",{class:"token punctuation"},"("),t("span",{class:"token constant"},"A"),e(),t("span",{class:"token operator"},"&"),e(),t("span",{class:"token constant"},"B"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"("),t("span",{class:"token keyword"},"keyof"),e(),t("span",{class:"token constant"},"A"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token operator"},"|"),e(),t("span",{class:"token punctuation"},"("),t("span",{class:"token keyword"},"keyof"),e(),t("span",{class:"token constant"},"B"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token comment"},"// (1)"),e("\n")])])],-1),t("p",null,"这很容易理解，也是符合直觉的。但是对于多个 interface 的联合类型（union type）来说，就有点绕了：",-1),t("div",{class:"language-ts"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"type"),e(),t("span",{class:"token class-name"},[t("span",{class:"token constant"},"K")]),e(),t("span",{class:"token operator"},"="),e(),t("span",{class:"token keyword"},"keyof"),e(),t("span",{class:"token punctuation"},"("),e("Person "),t("span",{class:"token operator"},"|"),e(" Lifespan"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token comment"},"// type K = never"),e("\n")])])],-1),t("p",null,[e("为什么是 "),t("code",null,"never"),e("？前面我们说过联合操作 "),t("code",null,"|"),e(" 相当于求并集，"),t("code",null,"Person | Lifespan"),e(" 所代表的集合由所有属于 "),t("code",null,"Person"),e(" 的值和所有属于 "),t("code",null,"Lifespan"),e(" 值组成，例如：")],-1),t("div",{class:"language-ts"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"const"),e(" p1 "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"{"),e(" name"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token string"},"'Rose'"),e(),t("span",{class:"token punctuation"},"}"),e("\n"),t("span",{class:"token keyword"},"const"),e(" p2 "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"{"),e(" name"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token string"},"'Monica'"),t("span",{class:"token punctuation"},","),e(" age"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token number"},"23"),e(),t("span",{class:"token punctuation"},"}"),e("\n"),t("span",{class:"token keyword"},"const"),e(" l1 "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"{"),e("\n birth"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token keyword"},"new"),e(),t("span",{class:"token class-name"},"Date"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'1932/06/23'"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},","),e("\n death"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token keyword"},"new"),e(),t("span",{class:"token class-name"},"Date"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'1992/03/21'"),t("span",{class:"token punctuation"},")"),e("\n"),t("span",{class:"token punctuation"},"}"),e("\n"),t("span",{class:"token keyword"},"const"),e(" l2 "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"{"),e("\n birth"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token keyword"},"new"),e(),t("span",{class:"token class-name"},"Date"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'1912/06/23'"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},","),e("\n death"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token keyword"},"new"),e(),t("span",{class:"token class-name"},"Date"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'1952/03/21'"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},","),e("\n gender"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token string"},"'male'"),e("\n"),t("span",{class:"token punctuation"},"}"),e("\n\n"),t("span",{class:"token keyword"},"let"),e(" p"),t("span",{class:"token operator"},":"),e(" Person "),t("span",{class:"token operator"},"|"),e(" Lifespan "),t("span",{class:"token operator"},"="),e(" p1 "),t("span",{class:"token comment"},"// Ok"),e("\np "),t("span",{class:"token operator"},"="),e(" p2 "),t("span",{class:"token comment"},"// Ok"),e("\np "),t("span",{class:"token operator"},"="),e(" l1 "),t("span",{class:"token comment"},"// Ok"),e("\np "),t("span",{class:"token operator"},"="),e(" l2 "),t("span",{class:"token comment"},"// Ok"),e("\n")])])],-1),t("p",null,[e("可以看到 "),t("code",null,"p1"),e("，"),t("code",null,"p2"),e("，"),t("code",null,"l1"),e("，"),t("code",null,"l2"),e(" 都属于 "),t("code",null,"Person | Lifespan"),e(" 类型，但是由于 "),t("code",null,"Person"),e(" 和 "),t("code",null,"Lifespan"),e(" 的接口定义中所描述的属性没有重叠的部分，所以 TypeScript 无法找到某一个属性是 "),t("code",null,"Person | Lifespan"),e(" 这个集合中的每一个值都包含的，例如上面的 "),t("code",null,"p1"),e("，"),t("code",null,"p2"),e(" 和 "),t("code",null,"l1"),e("，"),t("code",null,"l2"),e(" 之间没有共同的属性，但是他们都属于 "),t("code",null,"Person | Lifespan"),e("，所以 TypeScript 推断出 "),t("code",null,"keyof (Person | Lifespan)"),e(" 是空集，即 "),t("code",null,"never"),e("。")],-1),t("p",null,"更通用的规则，也可以用下面的公式来表达：",-1),t("div",{class:"language-ts"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"keyof"),e(),t("span",{class:"token punctuation"},"("),t("span",{class:"token constant"},"A"),e(),t("span",{class:"token operator"},"|"),e(),t("span",{class:"token constant"},"B"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"("),t("span",{class:"token keyword"},"keyof"),e(),t("span",{class:"token constant"},"A"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token operator"},"&"),e(),t("span",{class:"token punctuation"},"("),t("span",{class:"token keyword"},"keyof"),e(),t("span",{class:"token constant"},"B"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token comment"},"// (2)"),e("\n")])])],-1),t("p",null,"如果你能对 (1)，(2) 这两个公式建立直觉，那么你就朝着深入理解 TypeScript 的类型系统前进了一大步。",-1),t("p",null,[e("另一个表达 "),t("code",null,"PersonSpan"),e(" 类型的方法是使用 "),t("code",null,"extends"),e("：")],-1),t("div",{class:"language-ts"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"interface"),e(),t("span",{class:"token class-name"},"Person"),e(),t("span",{class:"token punctuation"},"{"),e("\n  name"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token builtin"},"string"),e("\n"),t("span",{class:"token punctuation"},"}"),e("\n"),t("span",{class:"token keyword"},"interface"),e(),t("span",{class:"token class-name"},"PersonSpan"),e(),t("span",{class:"token keyword"},"extends"),e(),t("span",{class:"token class-name"},"Person"),e(),t("span",{class:"token punctuation"},"{"),e("\n  birth"),t("span",{class:"token operator"},":"),e(" Date\n  death"),t("span",{class:"token operator"},"?"),t("span",{class:"token operator"},":"),e(" Date\n"),t("span",{class:"token punctuation"},"}"),e("\n")])])],-1),t("p",null,[e("如果把类型看作值的集合，那这里的 "),t("code",null,"extends"),e(" 该如何理解？很简单，"),t("code",null,"A extends B"),e("，可以直接理解为 "),t("code",null,"A"),e(" 是 "),t("code",null,"B"),e(" 的子集（subset）。"),t("code",null,"PersonSpan"),e(" 中的值必须包含 "),t("code",null,"name"),e(" 属性且它的值是个 "),t("code",null,"string"),e("，同时也必须包含 "),t("code",null,"birth"),e(" 属性。所以 "),t("code",null,"PersonSpan"),e(" 是一个符合要求的子集。你可能还听过子类型（subtype）的说法，它和这里子集（subset）表达的意思相同。看下面的例子：")],-1),t("div",{class:"language-ts"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"interface"),e(),t("span",{class:"token class-name"},"Vector1D"),e(),t("span",{class:"token punctuation"},"{"),e(" x"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token builtin"},"number"),e(),t("span",{class:"token punctuation"},"}"),e("\n"),t("span",{class:"token keyword"},"interface"),e(),t("span",{class:"token class-name"},"Vector2D"),e(),t("span",{class:"token keyword"},"extends"),e(),t("span",{class:"token class-name"},"Vector1D"),e(),t("span",{class:"token punctuation"},"{"),e(" y"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token builtin"},"number"),e(),t("span",{class:"token punctuation"},"}"),e("\n"),t("span",{class:"token keyword"},"interface"),e(),t("span",{class:"token class-name"},"Vector3D"),e(),t("span",{class:"token keyword"},"extends"),e(),t("span",{class:"token class-name"},"Vector2D"),e(),t("span",{class:"token punctuation"},"{"),e(" z"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token builtin"},"number"),e(),t("span",{class:"token punctuation"},"}"),e("\n")])])],-1),t("p",null,[e("这里你可以说 "),t("code",null,"Vector3D"),e(" 是 "),t("code",null,"Vector2D"),e(" 的子类型，"),t("code",null,"Vector2D"),e(" 又是 "),t("code",null,"Vector1D"),e(" 的子类型，从集合的角度，可以用韦恩图形象的描述它们之间的关系： "),t("img",{src:"/yangss/assets/ts-subtype.875029f9.svg",class:"mx-auto mt-20px"})],-1),t("p",null,[e("我们上面都是针对对象类型使用集合的概念进行解释，如果是字面类型（literal type）以及它们的联合类型，采用集合的解释会更加直观。"),t("code",null,"extends"),e(" 也可做为泛型的约束出现，在这种场景下，它也是子集（subset）的意思：")],-1),t("div",{class:"language-ts"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"function"),e(),t("span",{class:"token generic-function"},[t("span",{class:"token function"},"getKey"),t("span",{class:"token generic class-name"},[t("span",{class:"token operator"},"<"),t("span",{class:"token constant"},"K"),e(),t("span",{class:"token keyword"},"extends"),e(),t("span",{class:"token builtin"},"string"),t("span",{class:"token operator"},">")])]),t("span",{class:"token punctuation"},"("),e("val"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token builtin"},"any"),t("span",{class:"token punctuation"},","),e(" key"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token constant"},"K"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token punctuation"},"{"),e("\n  "),t("span",{class:"token comment"},"// ..."),e("\n"),t("span",{class:"token punctuation"},"}"),e("\n")])])],-1),t("p",null,[e("这里的 "),t("code",null,"extends string"),e(" 是什么意思？如果你从对象继承的角度来思考，那就很难解释，而如果从集合的角度来考虑，就很清楚了："),t("code",null,"K"),e(" 代表的集合必须是 "),t("code",null,"string"),e(" 的子集。这包括字符串字面类型（string literal type）、字符串字面类型的联合类型（union of string literal types）和 "),t("code",null,"string"),e(" 本身。")],-1),t("div",{class:"language-ts"},[t("pre",null,[t("code",null,[t("span",{class:"token function"},"getKey"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"{"),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},","),e(),t("span",{class:"token string"},"'x'"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token comment"},"// OK, 'x' extends string"),e("\n"),t("span",{class:"token function"},"getKey"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"{"),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},","),e(" Math"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"random"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token operator"},"<"),e(),t("span",{class:"token number"},"0.5"),e(),t("span",{class:"token operator"},"?"),e(),t("span",{class:"token string"},"'a'"),e(),t("span",{class:"token operator"},":"),e(),t("span",{class:"token string"},"'b'"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token comment"},"// OK, 'a'|'b' extends string"),e("\n"),t("span",{class:"token function"},"getKey"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"{"),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},","),e(" document"),t("span",{class:"token punctuation"},"."),e("title"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},";"),e(),t("span",{class:"token comment"},"// OK, string extends string"),e("\n"),t("span",{class:"token function"},"getKey"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"{"),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},","),e(),t("span",{class:"token number"},"12"),t("span",{class:"token punctuation"},")"),e("\n "),t("span",{class:"token comment"},"// ~~ Type '12' is not assignable to parameter of type 'string'"),e("\n")])])],-1),t("p",null,"如果把类型看作值的集合，这意味着具有相同值集合的两个类型是相同的。实际上就是这样，除非两个类型在语义上是不同的，只是碰巧有相同的值集合，否则没有理由将同一个类型定义两次。",-1),t("p",null,"最后，值得注意的是，并非所有的值集都有对应的 TypeScript 类型。所有整数组成的集合就没有对应的 TypeScript 类型，所有只包含 x 和 y 属性的对象组成的集合，也找不到对应的 TypeScript 类型。",-1),t("p",null,"TypeScript 中的术语与集合论中的术语的有如下对应关系：",-1),t("table",null,[t("thead",null,[t("tr",null,[t("th",null,"TypeScript term"),t("th",null,"Set term")])]),t("tbody",null,[t("tr",null,[t("td",null,"never"),t("td",null,"∅ (empty set)")]),t("tr",null,[t("td",null,"Literal type"),t("td",null,"Single element set")]),t("tr",null,[t("td",null,"Value assignable to T"),t("td",null,"Value ∈ T (member of)")]),t("tr",null,[t("td",null,"T1 assignable to T2"),t("td",null,"T1 ⊆ T2 (subset of)")]),t("tr",null,[t("td",null,"T1 extends T2"),t("td",null,"T1 ⊆ T2 (subset of)")]),t("tr",null,[t("td",null,"T1 | T2"),t("td",null,"T1 ∪ T2 (union)")]),t("tr",null,[t("td",null,"T1 & T2"),t("td",null,"T1 ∩ T2 (intersection)")]),t("tr",null,[t("td",null,"unknown"),t("td",null,"Universal set")])])],-1),t("h3",{id:"总结",tabindex:"-1"},[e("总结 "),t("a",{class:"header-anchor",href:"#总结","aria-hidden":"true"},"#")],-1),t("ul",null,[t("li",null,"把类型看作是类型的集合，这些集合可以是有限集（boolean，literal types）或者是无限集（number，string）。"),t("li",null,"请记住，一个对象仍然可以属于一个类型，即使它有在类型声明中没有提到的额外属性。"),t("li",null,"理解类型操作是作用在类型代表的集合上的。"),t("li",null,"把 ”extends“，“assignable to”，“subtype of” 看作是 ”subset of“（子集）的同义词。")],-1),t("h2",{id:"多余属性检查-excess-property-checking",tabindex:"-1"},[e("多余属性检查(Excess property checking) "),t("a",{class:"header-anchor",href:"#多余属性检查-excess-property-checking","aria-hidden":"true"},"#")],-1),t("p",null,"当你把一个对象的字面量赋值给一个有声明类型的变量时，TypeScript 会确保它具有该类型的属性，而且没有任何未声明的的属性：",-1),t("div",{class:"language-ts"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"interface"),e(),t("span",{class:"token class-name"},"Room"),e(),t("span",{class:"token punctuation"},"{"),e("\n  numDoors"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token builtin"},"number"),e("\n  ceilingHeightFt"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token builtin"},"number"),e("\n"),t("span",{class:"token punctuation"},"}"),e("\n\n"),t("span",{class:"token keyword"},"const"),e(" r"),t("span",{class:"token operator"},":"),e(" Room "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"{"),e("\n  numDoors"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token number"},"1"),t("span",{class:"token punctuation"},","),e("\n  ceilingHeightFt"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token number"},"10"),t("span",{class:"token punctuation"},","),e("\n  elephant"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token string"},"'present'"),e("\n"),t("span",{class:"token punctuation"},"}"),e(),t("span",{class:"token comment"},"// ~~~ Object literal may only specify known properties, and 'elephant' does not exist in type 'Room'"),e("\n")])])],-1),t("p",null,[e("但是通过引入一个中间变量，你还是可以把这个字面对象分配给 "),t("code",null,"Room"),e(" 类型：")],-1),t("div",{class:"language-ts"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"const"),e(" obj "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"{"),e("\n  numDoors"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token number"},"1"),t("span",{class:"token punctuation"},","),e("\n  ceilingHeightFt"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token number"},"10"),t("span",{class:"token punctuation"},","),e("\n  elephant"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token string"},"'present'"),t("span",{class:"token punctuation"},","),e("\n"),t("span",{class:"token punctuation"},"}"),e("\n"),t("span",{class:"token keyword"},"const"),e(" r"),t("span",{class:"token operator"},":"),e(" Room "),t("span",{class:"token operator"},"="),e(" obj "),t("span",{class:"token comment"},"// Ok"),e("\n")])])],-1),t("p",null,[e("变量 "),t("code",null,"obj"),e(" 的类型被推断为 "),t("code",null,"{ numDoors: number; ceilingHeightFt: number; elephant: string }"),e("，而这个类型的值集是 "),t("code",null,"Room"),e(" 类型的一个子集，所以赋值能通过类型检查。")],-1),t("p",null,"那么这两个例子有什么不同？第一个例子中触发了一个叫做”多余属性检查”(excess property checking)的过程，它会帮你捕获结构化类型系统中很容易被漏掉的一类重要的错误。但是这个过程有它的局限性，把它和常规的可赋值检查(assignability checking)混为一谈会使我们更难建立对结构化类型的直觉。认识到多余属性检查(excess property checking)是一个独特的过程将有助于你建立一个更清晰的 TypeScript 类型系统的心智模型。",-1),t("p",null,"TypeScript 不仅试图标记那些会在运行时抛出异常的代码。它还试图找到那些不按你的意图执行的代码。下面是一个例子：",-1),t("div",{class:"language-ts"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"interface"),e(),t("span",{class:"token class-name"},"Options"),e(),t("span",{class:"token punctuation"},"{"),e("\n  title"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token builtin"},"string"),e("\n  darkMode"),t("span",{class:"token operator"},"?"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token builtin"},"boolean"),e("\n"),t("span",{class:"token punctuation"},"}"),e("\n"),t("span",{class:"token keyword"},"function"),e(),t("span",{class:"token function"},"createWindow"),t("span",{class:"token punctuation"},"("),e("options"),t("span",{class:"token operator"},":"),e(" Options"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token punctuation"},"{"),e("\n  "),t("span",{class:"token keyword"},"if"),e(),t("span",{class:"token punctuation"},"("),e("options"),t("span",{class:"token punctuation"},"."),e("darkMode"),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token punctuation"},"{"),e("\n    "),t("span",{class:"token function"},"setDarkMode"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),e("\n  "),t("span",{class:"token punctuation"},"}"),e("\n "),t("span",{class:"token comment"},"// ..."),e("\n"),t("span",{class:"token punctuation"},"}"),e("\n\n"),t("span",{class:"token function"},"createWindow"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"{"),e("\n  title"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token string"},"'Spider Solitaire'"),t("span",{class:"token punctuation"},","),e("\n  darkmode"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token boolean"},"true"),e("\n  "),t("span",{class:"token comment"},"// ~~~~~ Object literal may only specify known properties, but"),e("\n  "),t("span",{class:"token comment"},"//       'darkmode' does not exist in type 'Options'."),e("\n  "),t("span",{class:"token comment"},"//       Did you mean to write 'darkMode'?"),e("\n"),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),e("\n")])])],-1),t("p",null,[e("这段代码在运行时阶段不会抛出任何错误。但它也不太可能是你的本意，原因正如错误提示指出的：应该是 "),t("code",null,"darkMode"),e("（大写的 M），而不是 "),t("code",null,"darkmode"),e("。")],-1),t("p",null,[e("一个纯结构化类型检查器无法发现这种错误，因为 "),t("code",null,"Options"),e(" 类型所表示的值集范围非常宽泛：它包括所有包含 "),t("code",null,"title"),e(" 属性（且是 "),t("code",null,"string"),e(" 类型）的对象，只要这个对象不包含非布尔值的 "),t("code",null,"darkMode"),e(" 属性：")],-1),t("div",{class:"language-ts"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"const"),e(" o1"),t("span",{class:"token operator"},":"),e(" Options "),t("span",{class:"token operator"},"="),e(" document "),t("span",{class:"token comment"},"// Ok"),e("\n"),t("span",{class:"token keyword"},"const"),e(" o2"),t("span",{class:"token operator"},":"),e(" Options "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token keyword"},"new"),e(),t("span",{class:"token class-name"},"HTMLAnchorElement"),e(),t("span",{class:"token comment"},"// Ok"),e("\n")])])],-1),t("p",null,[t("code",null,"document"),e(" 和 "),t("code",null,"HTMLAnchorElement"),e(" 的实例都有 "),t("code",null,"title"),e(" 属性，且都是字符串，所以这些赋值都可以成功。可见 "),t("code",null,"Options"),e(" 类型有多宽泛 !")],-1),t("p",null,[e("多余属性检查(excess property checking)试图在不破坏类型系统的基本结构性质的情况下控制这种情况。它通过禁止对象字面量的未知属性来做到这一点（有时被称为“严格的对象字面检查”）。"),t("code",null,"document"),e(" 和 "),t("code",null,"new HTMLAnchorElement"),e(" 都不是对象字面量，所以没有触发检查。但是 "),t("code",null,"{ title, darkmode }"),e(" 是对象字面量，它会触发这个检查。")],-1),t("div",{class:"language-ts"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"const"),e(" o"),t("span",{class:"token operator"},":"),e(" Options "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"{"),e(" darkmode"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token boolean"},"true"),t("span",{class:"token punctuation"},","),e(" title"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token string"},"'Ski Free'"),e(),t("span",{class:"token punctuation"},"}"),e("\n "),t("span",{class:"token comment"},"// ~~~ 'darkmode' does not exist in type 'Options'..."),e("\n")])])],-1),t("p",null,"这也就解释了为什么使用一个不带类型声明的中间变量就可以消除错误提示：",-1),t("div",{class:"language-ts"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"const"),e(" intermediate "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"{"),e(" darkmode"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token boolean"},"true"),t("span",{class:"token punctuation"},","),e(" title"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token string"},"'Ski Free'"),e(),t("span",{class:"token punctuation"},"}"),e("\n"),t("span",{class:"token keyword"},"const"),e(" o"),t("span",{class:"token operator"},":"),e(" Options "),t("span",{class:"token operator"},"="),e(" intermediate "),t("span",{class:"token comment"},"// Ok"),e("\n")])])],-1),t("p",null,"另外，如果你使用类型断言(type assertion)，也不会触发多余属性检查(excess property checking)：",-1),t("div",{class:"language-ts"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"const"),e(" o "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"{"),e(" darkmode"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token boolean"},"true"),t("span",{class:"token punctuation"},","),e(" title"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token string"},"'Ski Free'"),e(),t("span",{class:"token punctuation"},"}"),e(),t("span",{class:"token keyword"},"as"),e(" Options "),t("span",{class:"token comment"},"// OK"),e("\n")])])],-1),t("p",null,"这也是要尽可能使用类型声明而不是类型断言的理由之一。",-1),t("p",null,"如果你不想要这种检查，你可以使用一个 index signature 来告诉 TypeScript 你可以接受额外的属性：",-1),t("div",{class:"language-ts"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"interface"),e(),t("span",{class:"token class-name"},"Options"),e(),t("span",{class:"token punctuation"},"{"),e("\n  darkMode"),t("span",{class:"token operator"},"?"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token builtin"},"boolean"),e("\n  "),t("span",{class:"token punctuation"},"["),e("otherOptions"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token builtin"},"string"),t("span",{class:"token punctuation"},"]"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token builtin"},"unknown"),e("\n"),t("span",{class:"token punctuation"},"}"),e("\n"),t("span",{class:"token keyword"},"const"),e(" o"),t("span",{class:"token operator"},":"),e(" Options "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"{"),e(" darkmode"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token boolean"},"true"),e(),t("span",{class:"token punctuation"},"}"),e(),t("span",{class:"token comment"},"// OK"),e("\n")])])],-1),t("p",null,"在“弱”类型（weak type，只包含可选属性的类型）上也有一个类似的检查：",-1),t("div",{class:"language-ts"},[t("pre",null,[t("code",null,[t("span",{class:"token keyword"},"interface"),e(),t("span",{class:"token class-name"},"LineChartOptions"),e(),t("span",{class:"token punctuation"},"{"),e("\n  logscale"),t("span",{class:"token operator"},"?"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token builtin"},"boolean"),e("\n  invertedYAxis"),t("span",{class:"token operator"},"?"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token builtin"},"boolean"),e("\n  areaChart"),t("span",{class:"token operator"},"?"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token builtin"},"boolean"),e("\n"),t("span",{class:"token punctuation"},"}"),e("\n"),t("span",{class:"token keyword"},"const"),e(" opts "),t("span",{class:"token operator"},"="),e(),t("span",{class:"token punctuation"},"{"),e(" logScale"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token boolean"},"true"),e(),t("span",{class:"token punctuation"},"}"),e("\n"),t("span",{class:"token keyword"},"const"),e(" o"),t("span",{class:"token operator"},":"),e(" LineChartOptions "),t("span",{class:"token operator"},"="),e(" opts\n"),t("span",{class:"token comment"},"// ~~~ Type '{ logScale: boolean; }' has no properties in common with type 'LineChartOptions'"),e("\n")])])],-1),t("p",null,[e("从结构的角度来看，"),t("code",null,"LineChartOptions"),e(" 类型应该包括几乎所有的对象。对于像这样的弱类型，TypeScript 添加了另一个检查，以确保值类型和声明类型至少有一个共同的属性。和多余属性检查(excess property checking)一样，这在捕捉错别字方面很有效，而且不是严格的结构性检查。但与多余属性检查不同，它发生在所有涉及弱类型的赋值过程中，使用中间变量并不能绕过这个检查。")],-1),t("p",null,[e("多余属性检查是一种有效的方法，可以在属性名称中捕捉到错别字和其他错误。它对像 "),t("code",null,"Options"),e(" 这样包含可选字段的类型特别有用。但它的范围也非常有限：它只适用于对象字面量。认识到这个限制，并区分多余属性检查和普通的类型检查，这将有助于你建立两者的心智模型。")],-1),t("h3",{id:"总结-1",tabindex:"-1"},[e("总结 "),t("a",{class:"header-anchor",href:"#总结-1","aria-hidden":"true"},"#")],-1),t("ul",null,[t("li",null,"当你把一个对象的字面量分配给一个变量或把它作为一个参数传递给一个函数时，它会经过多余属性检查(excess property checking)。"),t("li",null,"多余属性检查是发现错误的有效方法，但它与 TypeScript 类型检查器通常所做的结构可分配性(structural assignability)检查不同。将这些过程混为一谈会使你更难建立可分配性的心智模型"),t("li",null,"注意多余属性检查的局限性：引入一个中间变量将绕过这些检查")],-1)];var c=n(l,[["render",function(n,t,e,o,l,c){return a(),s("div",null,p)}]]);export{o as __pageData,c as default};
