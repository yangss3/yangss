import{o as n,c as s,a}from"./app.a7aa7764.js";const p='{"title":"装饰着模式 call/apply","description":"","frontmatter":{},"headers":[{"level":2,"title":"透明缓存","slug":"透明缓存"},{"level":2,"title":"使用 func.call 设定上下文","slug":"使用-func-call-设定上下文"},{"level":2,"title":"使用 func.apply 来传递多参数","slug":"使用-func-apply-来传递多参数"}],"relativePath":"articles/decorator.md","lastUpdated":1630593571708}',t={},o=[a('<h1 id="装饰着模式-call-apply"><a class="header-anchor" href="#装饰着模式-call-apply" aria-hidden="true">#</a> 装饰着模式 call/apply</h1><blockquote><p><a href="https://juejin.cn/post/6844904089680084999" target="_blank" rel="noopener noreferrer">原文 1</a><a href="https://juejin.cn/post/6844904089734610957" target="_blank" rel="noopener noreferrer">原文 2</a></p></blockquote><p>JavaScript 在处理函数时提供了非凡的灵活性。它们可以被传递，用作对象，现在我们将看到如何在它们之间 转发（forward） 调用并 装饰（decorate） 它们。</p><h2 id="透明缓存"><a class="header-anchor" href="#透明缓存" aria-hidden="true">#</a> 透明缓存</h2><p>假设我们有一个 CPU 重负载的函数 <code>slow(x)</code>，但它的结果是稳定的。换句话说，对于相同的 x，它总是返回相同的结果。如果经常调用该函数，我们可能希望将结果缓存下来，以避免在重新计算上花费额外的时间。但是我们不是将这个功能添加到 <code>slow()</code> 中，而是创建一个包装器（wrapper）函数，该函数增加了缓存功能:</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">slow</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 这里可能会有重负载的 CPU 密集型工作</span>\n  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Called with </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> x\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">cachingDecorator</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 如果缓存中有对应的结果</span>\n      <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// 从缓存中读取结果</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment">// 否则就调用 func</span>\n    cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> result<span class="token punctuation">)</span>  <span class="token comment">// 然后将结果缓存下来</span>\n\n    <span class="token keyword">return</span> result\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nslow <span class="token operator">=</span> <span class="token function">cachingDecorator</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span>\n\n<span class="token function">slow</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 计算并缓存结果</span>\n<span class="token function">slow</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 从缓存中拿结果</span>\n</code></pre></div><p>在上面的代码中，<code>cachingDecorator</code> 是一个装饰者（decorator）：一个特殊的函数，它接受另一个函数并改变它的行为。从外部代码来看，包装的 <code>slow</code> 函数执行的仍然是与之前相同的操作。它只是在其行为上添加了缓存功能。</p><p>总而言之，使用分离的 <code>cachingDecorator</code> 而不是改变 <code>slow</code> 本身的代码有几个好处</p><ul><li><code>cachingDecorator</code> 是可重用的。我们可以将它应用于另一个函数</li><li>缓存逻辑是独立的，它没有增加 <code>slow</code> 本身的复杂性</li><li>如果需要，我们可以组合多个装饰者（其他装饰者将遵循同样的逻辑）</li></ul><h2 id="使用-func-call-设定上下文"><a class="header-anchor" href="#使用-func-call-设定上下文" aria-hidden="true">#</a> 使用 <code>func.call</code> 设定上下文</h2><p>上面提到的缓存装饰者不适用于对象方法。例如，在下面的代码中，<code>worker.slow</code> 在装饰后不会正常工作：</p><div class="language-js"><pre><code><span class="token comment">// 我们将对 worker.slow 的结果进行缓存</span>\n<span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">1</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token function">slow</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// CPU 密集型任务</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Called with &quot;</span> <span class="token operator">+</span> x<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// (1)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 和之前例子中的代码相同</span>\n<span class="token keyword">function</span> <span class="token function">cachingDecorator</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment">// (2)</span>\n    cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> result\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nworker<span class="token punctuation">.</span><span class="token function">slow</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 原始方法有效</span>\n\nworker<span class="token punctuation">.</span>slow <span class="token operator">=</span> <span class="token function">cachingDecorator</span><span class="token punctuation">(</span>worker<span class="token punctuation">.</span>slow<span class="token punctuation">)</span> <span class="token comment">// 现在对其进行缓存</span>\n\nworker<span class="token punctuation">.</span><span class="token function">slow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// Error: Cannot read property &#39;someMethod&#39; of undefined</span>\n</code></pre></div><p>错误发生在 (1) 中试图访问 <code>this.someMethod</code>，原因是 (2) 中包装器调用原始函数 <code>func(x)</code> 时丢失了 <code>this</code> 上下文，<code>func</code> 函数拿到的 <code>this</code> 为 <code>undefined</code> 。</p><p>要解决这个问题需要用到 JS 函数的一个特殊的内置方法 <code>Function.prototype.call</code>，它允许显式地为函数调用设置 <code>this</code> 上下文，语法如下：</p><div class="language-js"><pre><code><span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span>\n</code></pre></div><p>它运行 func，提供的第一个参数作为 <code>this</code>，后面的作为参数。简单地说，这两个调用几乎相同：</p><div class="language-js"><pre><code><span class="token function">func</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>\n<span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>\n</code></pre></div><p>它们调用的都是 <code>func</code>，参数是 <code>1, 2, 3</code>。唯一的区别是 <code>func.call</code> 还会将 <code>this</code> 设置为 <code>obj</code>。</p><p>在我们的例子中，我们可以在包装器中使用 <code>call</code> 将上下文传递给原始函数：</p><div class="language-js"><pre><code><span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">1</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token function">slow</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Called with &quot;</span> <span class="token operator">+</span> x<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// (1)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">cachingDecorator</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token comment">// 现在 &quot;this&quot; 被正确地传递了</span>\n    cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> result\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nworker<span class="token punctuation">.</span>slow <span class="token operator">=</span> <span class="token function">cachingDecorator</span><span class="token punctuation">(</span>worker<span class="token punctuation">.</span>slow<span class="token punctuation">)</span> <span class="token comment">// 现在对其进行缓存</span>\n\nworker<span class="token punctuation">.</span><span class="token function">slow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 工作正常</span>\nworker<span class="token punctuation">.</span><span class="token function">slow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 工作正常，使用的缓存</span>\n</code></pre></div><p>现在一切都正常工作了。</p><p>为理解地更清晰一些，让我们更深入地看看 <code>this</code> 是如何被传递的：</p><ol><li>在经过装饰之后，<code>worker.slow</code> 现在是包装器 <code>function (x) { ... }</code>。</li><li>因此，当<code> worker.slow(2)</code> 执行时，<code>slow</code> 函数内的 <code>this</code> 指向 <code>worker</code>（指向点符号 <code>.</code> 之前的对象）</li></ol><h2 id="使用-func-apply-来传递多参数"><a class="header-anchor" href="#使用-func-apply-来传递多参数" aria-hidden="true">#</a> 使用 <code>func.apply</code> 来传递多参数</h2><p>现在让我们把 <code>cachingDecorator</code> 写得更加通用。到现在为止，它只能用于单参数函数。</p><p>现在如何缓存多参数 worker.slow 方法呢?</p><div class="language-js"><pre><code><span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">slow</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> min <span class="token operator">+</span> max\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 应该记住相同参数的调用</span>\nworker<span class="token punctuation">.</span>slow <span class="token operator">=</span> <span class="token function">cachingDecorator</span><span class="token punctuation">(</span>worker<span class="token punctuation">.</span>slow<span class="token punctuation">)</span>\n</code></pre></div><p>我们需要将 <code>func.call(this, x)</code> 替换成 <code>func.call(this, ...arguments)</code>，以将所有参数传递给包装的函数调用，而不仅仅是只传递第一个参数。</p><p>这是一个更强大的 <code>cachingDecorator</code>：</p><div class="language-js"><pre><code><span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">slow</span><span class="token punctuation">(</span><span class="token parameter">min<span class="token punctuation">,</span> max</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Called with </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>min<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>max<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> min <span class="token operator">+</span> max\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">cachingDecorator</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> hash</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span> <span class="token comment">// (1)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">...</span>arguments<span class="token punctuation">)</span> <span class="token comment">// (2)</span>\n\n    cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> result\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> p <span class="token operator">+</span> c<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\nworker<span class="token punctuation">.</span>slow <span class="token operator">=</span> <span class="token function">cachingDecorator</span><span class="token punctuation">(</span>worker<span class="token punctuation">.</span>slow<span class="token punctuation">,</span> hash<span class="token punctuation">)</span>\n\nworker<span class="token punctuation">.</span><span class="token function">slow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 工作正常</span>\nworker<span class="token punctuation">.</span><span class="token function">slow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment">// 工作正常，使用的缓存</span>\n</code></pre></div><p>现在这个包装器可以处理任意数量的参数了， 这里有两个变化：</p><ol><li>在 (1) 行中它调用 <code>hash</code> 来从 <code>arguments</code> 创建一个单独的键。这里我们使用一个简单的求和函数，更复杂的情况可能需要其他哈希函数</li><li>然后 (2) 行使用 <code>func.call(this, ...arguments)</code> 将包装器获得的上下文和所有参数（不仅仅是第一个参数）传递给原始函数</li></ol><p>我们也可以使用 <code>func.apply(this, arguments)</code> 代替 <code>func.call(this, ...arguments)</code>，<code>call</code> 和 <code>apply</code> 之间唯一的语法区别是，<code>call</code> 期望一个参数列表，而 <code>apply</code> 期望一个包含这些参数的类数组对象。因此，这两个调用几乎是等效的：</p><div class="language-js"><pre><code><span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token comment">// 使用 spread 语法将数组作为列表传递</span>\n<span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>   <span class="token comment">// 与使用 call 相同</span>\n</code></pre></div><p>这里只有很小的区别：</p><ul><li>Spread 语法 <code>...</code> 允许将可迭代对象 <code>args</code> 作为列表传递给 <code>call</code>。</li><li><code>apply</code> 仅接受类数组对象 <code>args</code>。</li></ul><p>对于即可迭代又是类数组的对象，例如一个真正的数组，从技术上讲我们使用 <code>call</code> 或 <code>apply</code> 都行，但是 <code>apply</code> 可能会更快，因为大多数 JavaScript 引擎在内部对其进行了优化。</p><p>将所有参数连同上下文一起传递给另一个函数被称为“呼叫转移（call forwarding）”，这是它的最简形式：</p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token function-variable function">wrapper</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>当外部代码调用这种包装器 <code>wrapper</code> 时，它与原始函数 <code>func</code> 的调用是无法区分的。</p>',40)];t.render=function(a,p,t,c,e,u){return n(),s("div",null,o)};export{p as __pageData,t as default};
