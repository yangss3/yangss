import{o as a,c as e,a as t}from"./app.7a2a5498.js";const i='{"title":"Effective TypeScript","description":"","frontmatter":{},"headers":[{"level":2,"title":"理解代码生成与类型无关","slug":"理解代码生成与类型无关"},{"level":2,"title":"有类型错误的代码也可以生成 JavaScript","slug":"有类型错误的代码也可以生成-javascript"}],"relativePath":"articles/effective-ts.md","lastUpdated":1632325019973}',r={},p=[t('<h1 id="effective-typescript"><a class="header-anchor" href="#effective-typescript" aria-hidden="true">#</a> Effective TypeScript</h1><h2 id="理解代码生成与类型无关"><a class="header-anchor" href="#理解代码生成与类型无关" aria-hidden="true">#</a> 理解代码生成与类型无关</h2><p>TypeScript 的编译器 <code>tsc</code> 做了两件事：</p><ul><li>将下一代 TypeScript/JavaScript 转换为可在浏览器中使用的旧版本的 JavaScript（转译）</li><li>检查你的代码是否有类型错误</li></ul><p>令人惊讶的是，这两种行为是完全相互独立的。换句话说，你的代码中的类型不会影响最终生成的JavaScript。由于最终执行的是 JavaScript，这意味着你的类型不会影响你的代码运行方式。</p><h2 id="有类型错误的代码也可以生成-javascript"><a class="header-anchor" href="#有类型错误的代码也可以生成-javascript" aria-hidden="true">#</a> 有类型错误的代码也可以生成 JavaScript</h2><p>因为代码的输出与类型检查无关，因此，有类型错误的代码也能产生输出！</p><p>这可能会很令人惊讶。你可以把 TypeScript 的所有错误看作是一种警告：需要你引起注意并检查代码，但它们不会阻止 JavaScript 的生成。</p>',8)];r.render=function(t,i,r,c,s,l){return a(),e("div",null,p)};export{i as __pageData,r as default};
